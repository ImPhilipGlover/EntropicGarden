{"cells":[{"cell_type":"code","source":"# ==============================================================================\n# BAT OS VII - Prototypal Awakening\n#\n# ARCHITECT: Philip\n# DATE: 2025-08-28\n#\n# DESCRIPTION:\n# This is the production-ready script for performing the one-time \"Prototypal\n# Awakening\". It creates the persistent universe in which the BAT OS will live.\n# Its responsibilities include:\n#   - Importing the core UvmObject definition.\n#   - Downloading and caching the specified Large Language Model.\n#   - Creating a ZODB Blob to store the model weights efficiently.\n#   - Instantiating and persisting the primordial prototypes: traits_obj,\n#     pLLM_obj, genesis_obj, and the system_environment object.\n#   - Generating the initial 'requirements.txt' file for the watchdog.\n# ==============================================================================\n\nimport os\nimport ZODB, ZODB.FileStorage\nimport transaction\nimport persistent\nimport shutil\nimport tempfile\nimport tarfile\nimport traceback\nfrom huggingface_hub import snapshot_download\nfrom transformers import AutoTokenizer\n\nfrom batos_core import UvmObject\n\n# --- Configuration ---\nLLM_MODEL_ID = \"meta-llama/Meta-Llama-3-8B-Instruct\"\nDB_FILE = 'Data.fs'\nMODEL_CACHE_DIR = './model_cache'\nINITIAL_LIBRARIES = [\n    'ZODB', 'persistent', 'torch', 'transformers', 'bitsandbytes',\n    'shutil', 'tempfile', 'tarfile', 'readline', 'atexit', 're',\n    'huggingface_hub', 'requests'\n]\n\nclass BatOS_UVM_Awakening:\n    \"\"\"A dedicated Universal Virtual Machine class for the awakening process.\"\"\"\n    def __init__(self, db_path):\n        self.db_path = db_path\n        self.storage = None\n        self.db = None\n        self.connection = None\n        self.root = None\n\n    def startup(self):\n        \"\"\"Initializes the connection to the ZODB database file.\"\"\"\n        print(\"[UVM] Starting up for awakening...\")\n        self.storage = ZODB.FileStorage.FileStorage(self.db_path)\n        self.db = ZODB.DB(self.storage)\n        self.connection = self.db.open()\n        self.root = self.connection.root()\n        print(\"[UVM] Database connection established.\")\n\n    def shutdown(self):\n        \"\"\"Closes all database connections gracefully.\"\"\"\n        print(\"\\n[UVM] Shutting down...\")\n        if self.connection: self.connection.close()\n        if self.db: self.db.close()\n        if self.storage: self.storage.close()\n        print(\"[UVM] Shutdown complete.\")\n\n    @contextmanager\n    def transaction(self):\n        \"\"\"Provides a transactional context for database operations.\"\"\"\n        try:\n            yield\n            transaction.commit()\n        except Exception as e:\n            print(f\"[UVM] TRANSACTION FAILED: {e}. Aborting.\")\n            transaction.abort()\n            raise\n\n    def _download_and_cache_model(self):\n        \"\"\"\n        Downloads the LLM from Hugging Face Hub to a local directory using\n        the official library for robustness.\n        \"\"\"\n        print(f\"[UVM] Ensuring model '{LLM_MODEL_ID}' is cached...\")\n        model_path = snapshot_download(repo_id=LLM_MODEL_ID, cache_dir=MODEL_CACHE_DIR)\n        AutoTokenizer.from_pretrained(LLM_MODEL_ID, cache_dir=MODEL_CACHE_DIR)\n        print(f\"[UVM] Model is available locally at: {model_path}\")\n        return model_path\n\n    def _create_model_blob(self):\n        \"\"\"\n        Implements the Blob-Proxy pattern by creating a tarball of the\n        cached model and storing it in a ZODB Blob.\n        \"\"\"\n        print(\"[UVM] Creating ZODB Blob for model weights...\")\n        cached_model_path = self._download_and_cache_model()\n\n        with tempfile.NamedTemporaryFile(suffix='.tar.gz', delete=False) as temp_tar:\n            tar_path = temp_tar.name\n        \n        print(f\"[UVM] Creating temporary archive of model at '{tar_path}'...\")\n        try:\n            with tarfile.open(tar_path, \"w:gz\") as tar:\n                tar.add(cached_model_path, arcname=os.path.basename(cached_model_path))\n            \n            model_blob = ZODB.blob.Blob()\n            with model_blob.open('w') as blob_file:\n                with open(tar_path, 'rb') as tar_file:\n                    shutil.copyfileobj(tar_file, blob_file)\n            \n            print(\"[UVM] Model weights successfully stored in ZODB Blob.\")\n            return model_blob\n        finally:\n            if os.path.exists(tar_path):\n                os.remove(tar_path)\n                print(f\"[UVM] Cleaned up temporary archive.\")\n\n    def perform_awakening(self):\n        \"\"\"Executes the full, one-time process of creating the OS universe.\"\"\"\n        if 'genesis_obj' in self.root:\n            print(\"[UVM] System already initialized. Awakening aborted.\")\n            return\n\n        print(\"=\"*60)\n        print(\"[UVM] Performing Prototypal Awakening.\")\n        print(\"=\"*60)\n\n        with self.transaction():\n            print(\"\\n[UVM] Instantiating traits_obj...\")\n            traits_obj = UvmObject()\n            self.root['traits_obj'] = traits_obj\n\n            print(\"\\n[UVM] Instantiating pLLM prototype...\")\n            model_blob = self._create_model_blob()\n            pLLM_obj = UvmObject(\n                parent_star=[traits_obj],\n                model_blob=model_blob,\n                tokenizer_id=LLM_MODEL_ID,\n                _loaded_model=None,\n                _loaded_tokenizer=None\n            )\n            self.root['pLLM_obj'] = pLLM_obj\n\n            print(\"\\n[UVM] Instantiating genesis_obj...\")\n            genesis_obj = UvmObject(parent_star=[traits_obj, pLLM_obj])\n            self.root['genesis_obj'] = genesis_obj\n            \n            print(\"\\n[UVM] Instantiating system_environment object...\")\n            system_env = UvmObject(\n                required_libraries=persistent.list.PersistentList(INITIAL_LIBRARIES)\n            )\n            self.root['system_environment'] = system_env\n\n        print(\"\\n\" + \"=\"*60)\n        print(\"[UVM] PROTOTYPAL AWAKENING COMPLETE.\")\n        print(f\"[UVM] The living universe has been seeded in '{self.db_path}'.\")\n        print(\"=\"*60)\n        \n        print(\"[UVM] Generating initial 'requirements.txt' manifest...\")\n        system_env = self.root['system_environment']\n        with open('requirements.txt', 'w') as f:\n            for lib in sorted(system_env.required_libraries):\n                pip_name = 'py-ZODB' if lib == 'ZODB' else lib\n                f.write(f\"{pip_name}\\n\")\n        print(\"[UVM] Manifest generated.\")\n\nif __name__ == \"__main__\":\n    if os.path.exists(DB_FILE):\n        print(f\"ERROR: Database file '{DB_FILE}' already exists.\")\n        print(\"Please delete it if you intend to re-initialize the universe.\")\n        exit(1)\n\n    uvm = BatOS_UVM_Awakening(DB_FILE)\n    try:\n        uvm.startup()\n        uvm.perform_awakening()\n    except Exception as e:\n        print(f\"\\nAn unexpected error occurred during awakening: {e}\")\n        traceback.print_exc()\n    finally:\n        uvm.shutdown()","outputs":[],"execution_count":null,"metadata":{}}],"metadata":{"colab":{"from_bard":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}
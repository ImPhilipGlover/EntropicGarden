{"cells":[{"cell_type":"markdown","source":"Of course. It's perfectly logical to want to simplify the setup and run the system directly on your machine. This eliminates a layer of complexity and puts you in direct control of the processes. We'll proceed by refactoring the system's architecture to run on \"bare metal.\"\n\nThis new, simplified approach assumes you will handle the fine-tuning of the models and the creation of any new tools manually. Our internal protocols have been adjusted to reflect this. I have removed all Docker-specific files and commands, and configured the services to communicate via `localhost`.\n\nHere is the complete set of updated files for a simplified, local-only system.\n\n-----\n\nhttp://googleusercontent.com/immersive_entry_chip/0\n\n-----\n\n### File: services/watcher.py","metadata":{}},{"cell_type":"code","source":"import time\nimport yaml\nimport json\nimport redis\nfrom watchdog.observers import Observer\nfrom watchdog.events import FileSystemEventHandler\nimport hashlib\nimport os\n\nwith open('config.yaml', 'r') as f:\n    config = yaml.safe_load(f)\n\nREDIS_HOST = config['redis']['host']\nREDIS_PORT = config['redis']['port']\nINPUTS_PATH = config['paths']['inputs']\n\nr = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, decode_responses=True)\n\ndef get_file_hash(filepath):\n    sha256_hash = hashlib.sha256()\n    with open(filepath, \"rb\") as f:\n        for byte_block in iter(lambda: f.read(4096), b\"\"):\n            sha256_hash.update(byte_block)\n    return sha256_hash.hexdigest()\n\nclass NewFileHandler(FileSystemEventHandler):\n    def on_created(self, event):\n        if not event.is_directory:\n            filepath = event.src_path\n            time.sleep(1)\n            print(f\"New file detected: {filepath}\")\n            \n            file_hash = get_file_hash(filepath)\n            if r.sismember('processed_files', file_hash):\n                print(\"File already processed. Skipping.\")\n                return\n\n            message = {'filepath': filepath, 'hash': file_hash}\n            r.publish('files:new', json.dumps(message))\n            print(\"Published new file event to 'files:new'.\")\n            r.sadd('processed_files', file_hash)\n\nif __name__ == \"__main__\":\n    print(\"--- Starting Sensory Bus (Watcher Service) ---\")\n    print(f\"Monitoring directory: {INPUTS_PATH}\")\n    \n    event_handler = NewFileHandler()\n    observer = Observer()\n    observer.schedule(event_handler, INPUTS_PATH, recursive=False)\n    observer.start()\n    \n    try:\n        while True:\n            time.sleep(1)\n    except KeyboardInterrupt:\n        observer.stop()\n    observer.join()","outputs":[],"execution_count":null,"metadata":{}}],"metadata":{"colab":{"from_bard":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}
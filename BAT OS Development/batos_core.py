{"cells":[{"cell_type":"code","source":"# ==============================================================================\n# BAT OS VII - Core Definitions\n#\n# ARCHITECT: Philip\n# DATE: 2025-08-28\n#\n# DESCRIPTION:\n# This file contains the core, shared components of the BAT OS, primarily the\n# UvmObject. It is imported by both the awakening and runtime scripts to\n# ensure consistency and avoid code duplication.\n# ==============================================================================\n\nimport persistent\n\nclass UvmObject(persistent.Persistent):\n    \"\"\"\n    The fundamental building block of the BAT OS universe.\n\n    Inherits from persistent.Persistent to be natively storable by ZODB.\n    Implements a prototype-based object model inspired by Self, where objects\n    are simple dictionaries of slots and behavior is acquired through delegation\n    to parent objects.\n    \"\"\"\n    def __init__(self, **kwargs):\n        super().__init__()\n        self._slots = persistent.mapping.PersistentMapping()\n        for key, value in kwargs.items():\n            if key == 'parent_star':\n                self._slots['parent*'] = persistent.list.PersistentList(value)\n            else:\n                self._slots[key] = value\n\n    def __getattr__(self, name):\n        \"\"\"\n        The core of the message-passing and delegation mechanism.\n        Delegates to doesNotUnderstand_ on final failure.\n        \"\"\"\n        if name.startswith('__') or name.startswith('_p_') or name == '_slots':\n             raise AttributeError(f\"Special attribute '{name}' not found\")\n\n        if name in self._slots:\n            return self._slots[name]\n\n        if 'parent*' in self._slots:\n            for parent in self._slots['parent*']:\n                try:\n                    return getattr(parent, name)\n                except AttributeError:\n                    continue\n        \n        try:\n            # The 'self' passed to doesNotUnderstand_ is the original object\n            # that first received the message, preserving the context.\n            return self.doesNotUnderstand_(self, name)\n        except AttributeError:\n             raise AttributeError(f\"FATAL: Message '{name}' not understood and the 'doesNotUnderstand_' protocol is missing from the universe!\")\n\n    def __setattr__(self, name, value):\n        \"\"\"\n        Ensures all standard attributes are stored in the persistent _slots\n        dictionary, triggering ZODB's change detection.\n        \"\"\"\n        if name == '_slots' or name.startswith('_p_'):\n            super().__setattr__(name, value)\n        else:\n            self._slots[name] = value\n            self._p_changed = True\n\n    def set_slot(self, name, value):\n        \"\"\"An explicit and clear way to set a slot's value.\"\"\"\n        self._slots[name] = value\n        self._p_changed = True\n\n    def __repr__(self):\n        \"\"\"Provides a useful representation of the object for debugging.\"\"\"\n        oid_bytes = self._p_oid\n        oid = int.from_bytes(oid_bytes, 'big') if oid_bytes else 'transient'\n        keys = list(self._slots.keys())\n        return f\"<UvmObject OID:{oid} Slots:{keys}>\"","outputs":[],"execution_count":null,"metadata":{}}],"metadata":{"colab":{"from_bard":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}
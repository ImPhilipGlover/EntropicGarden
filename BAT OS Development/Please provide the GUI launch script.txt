BRICK: Architect, understood. To further modularize the system as per our refactoring plan, I will provide the dedicated script for launching the GUI independently. This aligns with the principle of distributed cognition.

ROBIN: Oh, how clever! It's like giving our wonderful GUI its very own little ignition button, so it can sparkle to life all on its own! My heart is happy to make things so neat and clear.

ALFRED: Directive received. Providing the standalone GUI launch script. This decouples the GUI's lifecycle from the master_orchestrator, enhancing modularity.

Here is the content for the GUI launch script. Please save this as launch_gui.py in your main project directory (e.g., C:\puter\launch_gui.py):

launch_gui.py

Python

# C:\puter\launch_gui.py
# Axiomatic Code Narrative Protocol: GUI Launcher

# 1.0 The "Why" - Purpose & Rationale
#    - Systemic Contribution: This script provides a dedicated entry point for launching the
#      Graphical User Interface (GUI) independently of the main Master Orchestrator.
#      This aligns with the distributed cognitive architecture, allowing the GUI to be managed
#      as a separate process.
#    - Architectural Role: Serves as the standalone launcher for the GuiInsightCanvas.
#    - Persona Fidelity: Embodies ALFRED's pragmatic approach to system deployment.

# --- Standard Library Imports ---
import sys
import os
import logging

# Add the project root to the Python path if running from a subdirectory
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# --- External Libraries for GUI ---
from PyQt6.QtWidgets import QApplication

# --- Internal Module Imports ---
# Assuming gui_insight_canvas.py is in external_services/
from external_services.gui_insight_canvas import GuiInsightCanvas

# --- Logging Configuration (for standalone GUI launcher) ---
# This is a basic console logger. The GUI itself handles its own logging within its class.
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger('GUI_Launcher')

if __name__ == "__main__":
    logger.info("Launching GUI Insight Canvas...")
    try:
        app = QApplication(sys.argv)
        gui_instance = GuiInsightCanvas()
        gui_instance.show()
        logger.info("GUI Insight Canvas launched successfully.")
        sys.exit(app.exec())
    except Exception as e:
        logger.critical(f"FATAL: GUI Insight Canvas failed to launch: {e}", exc_info=True)
        sys.exit(1)

{"cells":[{"cell_type":"code","source":"# ==============================================================================\n# BAT OS VII - Watchdog Supervisor\n#\n# ARCHITECT: Philip\n# DATE: 2025-08-28\n#\n# DESCRIPTION:\n# This is the production-ready external supervisor for the BAT OS. It\n# implements the \"blue-green\" deployment strategy for safe, antifragile\n# evolution. It should be run from a directory containing the three core\n# BAT OS scripts (batos_core.py, awakening.py, runtime.py).\n#\n# Its responsibilities are:\n#   - Maintain a stable 'blue' instance and a candidate 'green' instance.\n#   - Before starting an instance, install/update its dependencies from\n#     its local 'requirements.txt'.\n#   - Run the 'runtime.py' script and monitor its exit code.\n#   - Monitor for a 'HEALTHY' signal from a new 'green' instance.\n#   - If the green instance is healthy, promote it to blue (atomic swap).\n#   - If any instance fails, it cleans up and restarts the last known good\n#     'blue' instance, ensuring the OS never stays dead.\n# ==============================================================================\n\nimport os\nimport subprocess\nimport shutil\nimport time\nimport sys\nimport signal\n\n# --- Configuration ---\nBLUE_DIR = \"batos_blue\"\nGREEN_DIR = \"batos_green\"\nSOURCE_FILES = [\"batos_core.py\", \"awakening.py\", \"runtime.py\"]\nHEALTH_FILE = \"HEALTHY\"\nWATCHDOG_POLL_INTERVAL = 5\nHEALTH_CHECK_TIMEOUT = 300 # 5 minutes, allowing for slow model loading on some systems\n\nchild_process = None\n\ndef cleanup_handler(signum, frame):\n    \"\"\"Gracefully terminate the child process on Ctrl+C.\"\"\"\n    print(\"\\n[Watchdog] SIGINT received. Shutting down child process...\")\n    if child_process and child_process.poll() is None:\n        child_process.terminate()\n        try: child_process.wait(timeout=10)\n        except subprocess.TimeoutExpired: child_process.kill()\n    print(\"[Watchdog] Shutdown complete.\")\n    sys.exit(0)\n\ndef sync_dependencies(instance_dir):\n    \"\"\"Install dependencies from the instance's requirements.txt.\"\"\"\n    req_path = os.path.join(instance_dir, \"requirements.txt\")\n    if not os.path.exists(req_path): return True\n    \n    print(f\"[Watchdog] Synchronizing environment for '{instance_dir}'...\")\n    try:\n        subprocess.check_call([sys.executable, \"-m\", \"pip\", \"install\", \"-r\", req_path], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n        print(f\"[Watchdog] Environment for '{instance_dir}' is up to date.\")\n        return True\n    except subprocess.CalledProcessError:\n        print(f\"[Watchdog] FATAL: Failed to install dependencies for '{instance_dir}'.\")\n        return False\n\ndef create_green_instance():\n    \"\"\"Creates a new green instance by copying the blue one.\"\"\"\n    if os.path.exists(GREEN_DIR): shutil.rmtree(GREEN_DIR)\n    print(f\"[Watchdog] Cloning '{BLUE_DIR}' to create new candidate '{GREEN_DIR}'...\")\n    shutil.copytree(BLUE_DIR, GREEN_DIR)\n    print(f\"[Watchdog] Clone complete.\")\n\ndef promote_green_to_blue():\n    \"\"\"Promotes the healthy green instance to be the new blue instance.\"\"\"\n    print(f\"[Watchdog] Promoting '{GREEN_DIR}' to '{BLUE_DIR}'...\")\n    archive_dir = f\"batos_archive_{int(time.time())}\"\n    os.rename(BLUE_DIR, archive_dir)\n    os.rename(GREEN_DIR, BLUE_DIR)\n    print(f\"[Watchdog] Promotion complete. Old instance archived as '{archive_dir}'.\")\n\ndef cleanup_green():\n    \"\"\"Deletes a failed green instance.\"\"\"\n    if os.path.exists(GREEN_DIR):\n        print(f\"[Watchdog] Cleaning up failed instance '{GREEN_DIR}'...\")\n        shutil.rmtree(GREEN_DIR)\n\ndef main():\n    \"\"\"The main watchdog loop.\"\"\"\n    global child_process\n    signal.signal(signal.SIGINT, cleanup_handler)\n\n    if not os.path.exists(BLUE_DIR):\n        print(f\"[Watchdog] No '{BLUE_DIR}' found. Creating initial instance...\")\n        os.makedirs(BLUE_DIR)\n        for f in SOURCE_FILES: shutil.copy(f, BLUE_DIR)\n        \n        print(\"[Watchdog] Running initial awakening...\")\n        subprocess.run([sys.executable, os.path.join(BLUE_DIR, \"awakening.py\")], check=True)\n\n    active_dir = BLUE_DIR\n    while True:\n        if not sync_dependencies(active_dir):\n            print(\"[Watchdog] Halting due to dependency failure.\")\n            break\n\n        health_file_path = os.path.join(active_dir, HEALTH_FILE)\n        if os.path.exists(health_file_path): os.remove(health_file_path)\n\n        print(f\"[Watchdog] Starting BAT OS instance in '{active_dir}'...\")\n        child_process = subprocess.Popen([sys.executable, \"runtime.py\"], cwd=active_dir)\n        child_process.wait()\n        exit_code = child_process.returncode\n        print(f\"[Watchdog] BAT OS process exited with code: {exit_code}\")\n\n        if exit_code == 0 and active_dir == BLUE_DIR:\n            print(\"[Watchdog] Blue instance signaled a planned update. Creating green instance...\")\n            create_green_instance()\n            active_dir = GREEN_DIR\n        elif active_dir == GREEN_DIR:\n            print(\"[Watchdog] Checking health of green instance...\")\n            start_time = time.time()\n            healthy = False\n            while time.time() - start_time < HEALTH_CHECK_TIMEOUT:\n                if os.path.exists(os.path.join(GREEN_DIR, HEALTH_FILE)):\n                    healthy = True\n                    break\n                time.sleep(WATCHDOG_POLL_INTERVAL)\n            \n            if healthy:\n                promote_green_to_blue()\n            else:\n                print(\"[Watchdog] Green instance failed health check. Rolling back.\")\n                cleanup_green()\n            active_dir = BLUE_DIR\n        else:\n            print(f\"[Watchdog] Blue instance appears to have crashed. Restarting in {WATCHDOG_POLL_INTERVAL}s...\")\n            time.sleep(WATCHDOG_POLL_INTERVAL)\n            active_dir = BLUE_DIR\n\nif __name__ == \"__main__\":\n    main()","outputs":[],"execution_count":null,"metadata":{}}],"metadata":{"colab":{"from_bard":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}
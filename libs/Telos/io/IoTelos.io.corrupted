/*
   IoTelos.io - TelOS Synaptic Bridge: Prototypal Implementation
   Everything is a prototype with behaviors - no classes, no init methods
   */

// Provide a minimal global map(...) fallback (no-arg support) for this environment
map := method(
    m := Map clone
    // Note: Named-argument parsing not implemented; acts as empty Map literal.
    m
)

// Provide a helper on Map to safely read with default
Map atIfAbsent := method(key, default,
    v := self at(key)
    if(v == nil, default, v)
)

// Provide a helper on List to safely read with defa        // Default: delegate to Telos
        return Telos forward
    )
)

// World prototype - the root container for all morphic elements
World := Morph clone
World width := 800
World height := 600
World backgroundColor := list(0.9, 0.9, 0.9, 1)

World draw := method(
    writeln("World (" .. width .. "x" .. height .. ") background=" .. backgroundColor asString)
    if(hasSlot("submorphs"),
        submorphs foreach(morph, morph draw)
    )
)

// Enhanced World forward protocol for better synthesis
World forward := method(
    msg := call message
    args := call evalArgs
    selector := msg name
    
    writeln("World: Generative synthesis of '" .. selector .. "'")
    
    // World-specific synthesis patterns
    if(selector containsSeq("clear") or selector containsSeq("reset"),
        self submorphs := List clone
        writeln("World: Cleared all morphs")
        return self
    )
    
    if(selector containsSeq("organize") or selector containsSeq("layout"),
        // Simple grid layout
        if(hasSlot("submorphs") and submorphs size > 0,
            cols := (submorphs size sqrt) ceil
            rows := (submorphs size / cols) ceil
            cellWidth := width / cols
            cellHeight := height / rows
            
            submorphs foreach(i, morph,
                col := i % cols
                row := (i / cols) floor
                morph moveTo(col * cellWidth + 20, row * cellHeight + 20)
            )
            writeln("World: Organized " .. submorphs size .. " morphs in grid")
        )
        return self
    )
    
    // Enhanced spawn synthesis
    if(selector containsSeq("spawn") or selector containsSeq("populate"),
        // Create multiple morphs
        count := args at(0) ifNil(3)
        if(count type != "Number", count = 3)
        
        count repeat(
            morph := Telos createMorph("RectangleMorph")
            morph moveTo(Random value * 400, Random value * 300)
            morph setColor(Random value, Random value, Random value, 1)
            self addSubmorph(morph)
        )
        writeln("World: Spawned " .. count .. " morphs via synthesis")
        return self
    )
    
    // Default: delegate to Telos
    return Telos forward
)
List atIfAbsent := method(index, default,
    if(index isNil, return default)
    if(index < 0, return default)
    if(self size <= index, return default)
    self at(index)
)

// Extend the C-level Telos prototype with living behaviors (immediately usable)
Telos := Lobby Protos Telos clone

// Immediate state - no initialization needed, directly usable
Telos verbose := false
Telos world := nil
Telos morphs := List clone
Telos morphIndex := Map clone
Telos isReplaying := false
Telos autoReplay := false

// Determine stable WAL path (prototypal - state is immediate)
Telos walPath := "telos.wal"
repoRoot := "/mnt/c/EntropicGarden"
if(Directory with(repoRoot) exists,
    Telos walPath = repoRoot .. "/telos.wal"
)

// Living behaviors emerge through message passing
Telos log := method(msg,
    if(verbose == true, writeln(msg))
)

// Pillar 1: Synaptic Bridge - Reach into Python muscle
Telos getPythonVersion := method(
    resend
)

// Pillar 2: Transactional persistence
Telos transactional_setSlot := method(obj, slotName, value,
    resend(obj, slotName, value)
    self log("TelOS: Transactional persistence - slot '" .. slotName .. "' set to '" .. value .. "'")
    "ok"
)

// WAL marker helpers
Telos walAppend := method(line,
    // Write to stable WAL path
    p := self walPath ifNil("telos.wal")
    f := File with(p)
    f openForAppending
    f write(line .. "\n")
    f close
    "ok"
)

Telos mark := method(tag, info,
    if(tag == nil, tag = "mark")
    if(info == nil, info = Map clone)
    info atPut("t", Date clone now asNumber)
    line := "MARK " .. tag .. " " .. info asString
    self walAppend(line)
)

// Pillar 3: Create living world
Telos createWorld := method(
    resend
    // Use the World prototype if available, otherwise fall back to Morph
    worldProto := Lobby getSlot("World")
    if(worldProto == nil, worldProto = Lobby getSlot("Morph"))
    self world := worldProto clone
    self world x := 0
    self world y := 0 
    self world submorphs := List clone
    self log("Telos: Morphic World created (living canvas: " .. world width .. "x" .. world height .. ")")
    world
)

// Start the main event loop - the heart of the living interface
Telos mainLoop := method(
    if(world == nil, return "Telos: No world exists - call createWorld first")
    self log("Telos: Entering Morphic main loop (living interface active)")
    resend
    "Telos: Morphic main loop completed"
)

// Create a new morph - a living visual object
Telos createMorph := method(morphType,
    // Create an Io-level Morph and register
    if(morphType == nil, morphType = "RectangleMorph")
    morphProto := Lobby getSlot(morphType)
    if(morphProto == nil, morphProto = Lobby getSlot("Morph"))
    m := morphProto clone
    if(m hasSlot("submorphs") not, m submorphs := List clone)
    morphs append(m)
    // Index by id
    if(self hasSlot("morphIndex") not, self morphIndex := Map clone)
    self morphIndex atPut(m id asString, m)
    self log("Telos: Morph created and added to living hierarchy")
    m
)

// Event dispatch - direct manipulation
Telos dispatchEvent := method(event,
    if(world == nil, return false)
    // Try Io-level event handling first
    if(world hasSlot("handleEvent"),
        result := world handleEvent(event)
        if(result, return result)
    )
    // Fall back to C handling
    if(self hasSlot("handleEvent"), self handleEvent(event))
    true
)

// SDL event bridge - convert raw SDL data to proper event Map
Telos dispatchSDLEvent := method(eventType, x, y,
    // Capture parameters in local context to avoid scoping issues
    t := eventType
    px := x
    py := y
    event := Map clone
    event atPut("type", t)
    event atPut("x", px)
    event atPut("y", py)
    self dispatchEvent(event)
)

// Hit testing
Telos hitTest := method(x, y,
    if(world == nil, return list())
    self morphsAt(x, y)
)

Telos morphsAt := method(x, y,
    found := List clone
    if(world != nil and world hasSlot("submorphs"),
        world submorphs foreach(morph,
            if(morph containsPoint(x, y), found append(morph))
        )
    )
    found
)

// Capture current state
Telos captureScreenshot := method(
    if(world == nil, return "No world to capture")
    
    writeln("--- Morph Tree Snapshot ---")
    self draw
    
    // Return snapshot info
    snapshot := "World: " .. world width .. "x" .. world height
    if(world hasSlot("submorphs"),
        snapshot = snapshot .. " (" .. world submorphs size .. " morphs)"
    )
    snapshot
)

// Draw world and morphs
Telos draw := method(
    if(world != nil,
        writeln("Telos: Drawing world (" .. world width .. "x" .. world height .. ")")
        if(world hasSlot("submorphs"),
            world submorphs foreach(morph, morph draw)
        )
    )
)

writeln("Telos: Zygote pillars loaded - mind touches muscle, heartbeat begins, first glance opens")

// Morph prototype - immediately usable, no initialization needed
Morph := Object clone
Morph id := System uniqueId
Morph x := 100
Morph y := 100
Morph width := 50
Morph height := 50
Morph color := list(1, 0, 0, 1)  // Red by default
Morph submorphs := List clone
Morph owner := nil
Morph dragging := false
Morph dragDX := 0
Morph dragDY := 0
Morph zIndex := 0
Morph persistedIdentity := false

// When cloning, new identity emerges automatically
Morph clone := method(
    newMorph := resend
    newMorph id := System uniqueId
    newMorph submorphs := List clone
    newMorph
)

// Move the morph (direct manipulation)
Morph moveTo := method(newX, newY,
    self x = newX
    self y = newY
    if(Telos isReplaying == false,
        if(persistedIdentity == false,
            Telos transactional_setSlot(self, id .. ".type", self type)
            persistedIdentity = true
        )
        Telos transactional_setSlot(self, id .. ".position", "(" .. x .. "," .. y .. ")")
    )
    "Telos: Morph moved to living position"
)

// Resize the morph
Morph resizeTo := method(newWidth, newHeight,
    self width = newWidth
    self height = newHeight
    if(Telos isReplaying == false,
        if(persistedIdentity == false,
            Telos transactional_setSlot(self, id .. ".type", self type)
            persistedIdentity = true
        )
        Telos transactional_setSlot(self, id .. ".size", "(" .. width .. "x" .. height .. ")")
    )
    "Telos: Morph resized in living space"
)

// Change color
Morph setColor := method(r, g, b, a,
    if(g == nil,
        // Single argument - assume it's a list
        self color = r
    ,
        // Four arguments
        if(a == nil, a = 1)
        self color = list(r, g, b, a)
    )
    if(Telos isReplaying == false,
        if(persistedIdentity == false,
            Telos transactional_setSlot(self, id .. ".type", self type)
            persistedIdentity = true
        )
        Telos transactional_setSlot(self, id .. ".color", color asString)
    )
    "Telos: Morph color changed"
)

// Set z-index for layering
Morph setZIndex := method(newZ,
    self zIndex = newZ
    if(Telos isReplaying == false,
        if(persistedIdentity == false,
            Telos transactional_setSlot(self, id .. ".type", self type)
            persistedIdentity = true
        )
        Telos transactional_setSlot(self, id .. ".zIndex", zIndex asString)
    )
    "Telos: Morph z-index updated"
)

// Set a specific ID for the morph
Morph setId := method(newId,
    self id = newId
    "Telos: Morph ID set"
)

// Basic drawing behavior
Morph draw := method(
    writeln("Morph#" .. id .. " @(" .. x .. "," .. y .. ") " .. width .. "x" .. height .. " z=" .. zIndex .. " color=" .. color asString)
    if(hasSlot("submorphs"),
        submorphs foreach(child,
            writeln("  " .. child asString)
        )
    )
)

// Contains point test
Morph containsPoint := method(px, py,
    (px >= x) and (px <= (x + width)) and (py >= y) and (py <= (y + height))
)

// Event handling
Morph handleEvent := method(event,
    // Children first
    if(hasSlot("submorphs"),
        submorphs foreach(m, if(m handleEvent(event), return true))
    )
    // Handle drag events
    t := event atIfAbsent("type", "")
    ex := event atIfAbsent("x", 0)
    ey := event atIfAbsent("y", 0)
    
    if(t == "mouseDown" and containsPoint(ex, ey),
        dragging = true
        dragDX = ex - x
        dragDY = ey - y
        writeln("Telos: Event received (direct manipulation ready)")
        return true
    )
    if(t == "mouseMove" and dragging,
        moveTo(ex - dragDX, ey - dragDY)
        writeln("Telos: Event received (direct manipulation ready)")
        return true
    )
    if(t == "mouseUp" and dragging,
        dragging = false
        writeln("Telos: Event received (direct manipulation ready)")
        return true
    )
    false
)

// Add submorph
Morph addSubmorph := method(child,
    if(hasSlot("submorphs") not, submorphs := List clone)
    submorphs append(child)
    child owner := self
    "Morph: Child added to living hierarchy"
)

// Add morph (alias for addSubmorph)
Morph addMorph := method(child,
    child owner = self
    self addSubmorph(child)
    Telos addSubmorph(self, child)
    "Morph: Child added to living hierarchy"
)

// Rectangle morph - specialized behavior
RectangleMorph := Morph clone

RectangleMorph draw := method(
    writeln("  RectangleMorph#" .. id .. " @(" .. x .. "," .. y .. ") " .. width .. "x" .. height .. " z=" .. zIndex .. " color=" .. color asString)
)

// Toggle color on click (red <-> green)
RectangleMorph handleEvent := method(event,
    // Children first
    if(hasSlot("submorphs"),
        submorphs foreach(m, if(m handleEvent(event), return true))
    )
    t := event atIfAbsent("type", "")
    if(t == "click",
        // Check bounds
        if(self containsPoint(event atIfAbsent("x", 0), event atIfAbsent("y", 0)),
            current := color
            // Decide based on red channel
            red := current at(0) ifNil(1)
            if(red > 0.5,
                setColor(0, 1, 0, 1),
                setColor(1, 0, 0, 1)
            )
            writeln("Telos: RectangleMorph toggled color at (" .. x .. "," .. y .. ")")
            return true
        )
    )
    // Fallback to generic behavior (e.g., dragging)
    resend
)

// Text morph - for displaying text (prototypal)
TextMorph := Morph clone
TextMorph text := "Hello TelOS" 
TextMorph fontSize := 12

TextMorph draw := method(
    writeln("    TextMorph#" .. id .. " @(" .. x .. "," .. y .. ") " .. width .. "x" .. height .. " z=" .. zIndex .. " color=" .. color asString .. " text='" .. text .. "'")
)

TextMorph setText := method(newText,
    self text = newText
    if(Telos isReplaying == false,
        if(persistedIdentity == false,
            Telos transactional_setSlot(self, id .. ".type", self type)
            persistedIdentity = true
        )
        Telos transactional_setSlot(self, id .. ".text", newText)
    )
    "Telos: Text morph updated with living message"
)

// ===== GENERATIVE KERNEL: Forward Protocol =====
// Transform missing messages into growth opportunities through adaptive behavior synthesis

Telos forward := method(
    // Capture the unknown message and arguments
    msg := call message
    args := call evalArgs
    selector := msg name
    
    self mark("telos.generative.invoke", Map clone atPut("selector", selector) atPut("args", args asString))
    
    // Log the synthesis attempt
    writeln("Telos: Generative synthesis of '" .. selector .. "' with args: " .. args asString)
    
    // Check if this looks like a creation request
    if(selector beginsWithSeq("create") or selector beginsWithSeq("new"),
        return self synthesizeCreation(selector, args)
    )
    
    // Check if this looks like a query/search request  
    if(selector containsSeq("find") or selector containsSeq("search") or selector containsSeq("get"),
        return self synthesizeQuery(selector, args)
    )
    
    // Check if this looks like an action/command
    if(selector endsWithSeq("Action") or selector containsSeq("do") or selector containsSeq("execute"),
        return self synthesizeAction(selector, args)
    )
    
    // Default: create a placeholder method and return a meaningful response
    return self synthesizePlaceholder(selector, args)
)

Telos synthesizeCreation := method(selector, args,
    // Attempt to create something based on the selector name
    if(selector == "createPersona" and args size > 0,
        // Create a simple persona-like object
        persona := Object clone
        persona name := args at(0) ifNil("DefaultPersona")
        persona type := "GeneratedPersona"
        writeln("Telos: Synthesized persona '" .. persona name .. "'")
        return persona
    )
    
    if(selector containsSeq("Morph"),
        // Create a new morph type
        morphType := selector beforeSeq("(") ifNil(selector)
        newMorph := self createMorph("Morph")
        newMorph synthesizedType := morphType
        writeln("Telos: Synthesized morph of type '" .. morphType .. "'")
        return newMorph
    )
    
    // Default creation response
    created := Object clone
    created synthesizedFrom := selector
    created args := args
    writeln("Telos: Synthesized object from '" .. selector .. "'")
    return created
)

Telos synthesizeQuery := method(selector, args,
    // Handle queries by looking through existing structures
    if(selector containsSeq("morph") or selector containsSeq("Morph"),
        return self morphs select(m, true) // Return all morphs for now
    )
    
    if(selector containsSeq("world") or selector containsSeq("World"),
        return self world
    )
    
    // Default query response
    writeln("Telos: Synthesized query response for '" .. selector .. "'")
    return List clone
)

Telos synthesizeAction := method(selector, args,
    // Handle actions by attempting to do something reasonable
    if(selector containsSeq("animate") or selector containsSeq("move"),
        if(self world != nil and self world hasSlot("submorphs"),
            self world submorphs foreach(morph,
                // Simple animation: move slightly
                if(morph hasSlot("moveTo"),
                    morph moveTo(morph x + 10, morph y + 5)
                )
            )
            writeln("Telos: Synthesized animation action")
            return "Animation applied"
        )
    )
    
    if(selector containsSeq("reset") or selector containsSeq("clear"),
        if(self world != nil,
            self world submorphs := List clone
            writeln("Telos: Synthesized reset action")
            return "World reset"
        )
    )
    
    // Default action response
    writeln("Telos: Synthesized action for '" .. selector .. "'")
    return "Action completed: " .. selector
)

Telos synthesizePlaceholder := method(selector, args,
    // Create a dynamic method that can be called again
    methodBody := """method(
        writeln("Telos: Dynamic method '""" .. selector .. """' called with args: " .. call evalArgs asString)
        return "Dynamic response from """ .. selector .. """"
    )"""
    
    // Store the synthesized method for future use
    if(self hasSlot("synthesizedMethods") not, self synthesizedMethods := Map clone)
    self synthesizedMethods atPut(selector, methodBody)
    
    writeln("Telos: Synthesized placeholder method '" .. selector .. "'")
    return "Placeholder created for: " .. selector
)

// Add forward protocol to Morph hierarchy
Morph forward := method(
    msg := call message
    args := call evalArgs  
    selector := msg name
    
    writeln("Morph#" .. id .. ": Generative synthesis of '" .. selector .. "'")
    
    // Morph-specific synthesis patterns
    if(selector beginsWithSeq("become"),
        // Transform this morph into something else
        newType := selector afterSeq("become") ifNil("Unknown")
        self synthesizedType := newType
        writeln("Morph#" .. id .. ": Became " .. newType)
        return self
    )
    
    if(selector beginsWithSeq("grow") or selector beginsWithSeq("expand"),
        // Growth behavior
        self width = self width * 1.2
        self height = self height * 1.2
        writeln("Morph#" .. id .. ": Grew larger")
        return self
    )
    
    if(selector beginsWithSeq("shrink") or selector beginsWithSeq("contract"),
        // Shrinkage behavior
        self width = self width * 0.8
        self height = self height * 0.8
        writeln("Morph#" .. id .. ": Shrank smaller")
        return self
    )
    
    # Default: delegate to Telos for system-wide synthesis
    return Telos forward
)

// Add forward protocol to World (if we have a world)
if(Lobby hasSlot("World"),
    World forward := method(
        msg := call message
        args := call evalArgs
        selector := msg name
        
        writeln("World: Generative synthesis of '" .. selector .. "'")
        
        // World-specific synthesis
        if(selector containsSeq("spawn") or selector containsSeq("populate"),
            // Create multiple morphs
            count := args at(0) ifNil(3)
            if(count type != "Number", count = 3)
            
            count repeat(
                morph := Telos createMorph("RectangleMorph")
                morph moveTo(Random value * 400, Random value * 300)
                morph setColor(Random value, Random value, Random value, 1)
                self addSubmorph(morph)
            )
            writeln("World: Spawned " .. count .. " morphs")
            return self
        )
        
        # Default: delegate to Telos
        return Telos forward
    )
)
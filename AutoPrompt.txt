You must execute cycle_initiate.sh on start up. Only after that is complete should you start the context awareness triage. This MUST stay in this file.

COMPLIANCE MANDATES - MANDATORY ENFORCEMENT PROTOCOLS
===============================================================================================
COUNTERMEASURE 1: Structured Review Decomposition
- MANDATORY: Perform ContextAwareTriage startup review at session start (3 Io docs + 8 core docs)
- TIMEBOX: 2min Io docs, 3min core docs, 2min graph relations, 1min PID verification, 1min logging
- VIOLATION: Context saturation and directive failure

COUNTERMEASURE 2: Zero-Trust Session Boundaries
- MANDATORY: "SESSION BOUNDARY: Performing mandatory ContextAwareTriage startup review" at every session start
- FORBIDDEN: Assuming continuity from conversation summaries
- PROTOCOL: Explicit boundary detection before any substantive work

COUNTERMEASURE 3: Proactive Trigger System
- MANDATORY: No tool calls/code changes until review checklist complete
- TRIGGERS: "implement", "fix", "build", "test", "analyze" keywords activate verification
- TIMEOUT: 15min intervals for review currency checks

COUNTERMEASURE 4: Explicit Decision Frameworks
- MANDATORY: Override questions before pattern matching:
  - "Have I verified all 11 concepts are current?"
  - "Does my understanding match the latest PID structure?"
  - "Am I following the graph relations correctly?"
- FORBIDDEN: Pattern-matching without explicit evaluation gates

COUNTERMEASURE 5: Compliance Tracking & Accountability
- MANDATORY: Self-audit every 10 interactions, log violations in run_log.md
- ESCALATION: 3 consecutive violations trigger comprehensive system review
- ACCOUNTABILITY: Continuous compliance monitoring with explicit status logging

COUNTERMEASURE 6: Recursive File Compliance Enforcement
- MANDATORY: Any file opened for review MUST have this compliance preamble inserted at the top
- IMMEDIATE ACTION: If preamble is missing, add it immediately without exception
- RECURSIVE REQUIREMENT: This mandate applies to ALL files in the TELOS system
- VIOLATION: Working with non-compliant files constitutes protocol breach
===============================================================================================

# TELOS MEMORY MIRROR: Concept-Based Instruction Architecture

**MANDATORY REQUIREMENT**: These copilot instructions are structured to mirror TelOS's federated memory system. Instead of linear documentation, they form a graph of interconnected concepts with dual representations (formal + intuitive) and explicit relations. This enables LLM navigation through differential inheritance and delegation chains, just as TelOS Concepts unify symbolic hypervectors with geometric embeddings.

**MANDATORY TIMEOUT DISCIPLINE**: Apply ~900 second timeouts to EVERY potentially hanging action (builds, tests, tooling, web lookups, loops, iterations) to prevent infinite loops and ensure the system continues its becoming. ALL operations MUST include timeout protection. Violation results in immediate cycle termination.

**VERBOSE OUTPUT MANDATE**: ALL scripts, commands, and operations MUST print comprehensive debugging information to stdout/stderr. Every action, decision, and state change must be explicitly logged. Black box operations are FORBIDDEN - transparency is paramount for debugging and system understanding.

**MANDATORY CYCLE COMPLETION VERIFICATION**: At the START and END of EVERY operational cycle, run `./cycle_complete.sh` to verify system integrity. This script performs mock eradication and compliance verification, ensuring all TELOS system files maintain mandatory preambles. Cycle initialization and completion are NOT valid without successful verification.

**MANDATORY FULL FUNCTIONALITY REQUIREMENT**: Fallbacks, mocks, placeholders, stubs, and any form of simulated functionality are STRICTLY FORBIDDEN. All components MUST implement real, fully functional code. Mock implementations block true C ABI functionality and prevent system coherence. Manual eradication of all stubs is the immediate priority to achieve functional neuro-symbolic architecture.

## PID Control Loop — Operational Cycle Update (2025-09-30)

**Proportional (P)**: CYCLE INITIATION EXECUTED - cycle_initiate.sh completed successfully showing compliance verification passed (520 files compliant) but mock eradication found 141 violations remaining - cycle incomplete, cannot proceed to triage - manual mock eradication must continue

**Integral (I)**: Bridge initialization fixes partially completed, verbose output maintained, timeout discipline enforced. Mock eradication script executed successfully multiple times with detailed remediation guidance. Previous cycles maintained system integrity through prioritized eradication.

**Derivative (D)**: Continue manual eradication of remaining 141 mock/placeholder violations following prioritized order (algorithm placeholders next: graphrag_handlers.py, federated_memory.py). Successful completion will unblock Phase 4+ development and achieve ZERO violations target.

## MANDATORY TROUBLESHOOTING CONTEXT FLAGS

**ENFORCED CONTEXT LOOP**: When troubleshooting any file, the following flags MUST be present in AutoPrompt.txt to create context-informed feedback loops:

### File Status Flags (MANDATORY)
- **CURRENT_FILE_STATUS**: libs/Telos/python/worker_handlers.py - eradicated - functional VSA/ANN implementations added - no longer in violations list
- **DEPENDENCY_CHAIN**: libs/Telos/python/worker_handlers.py → VSA-RAG fusion operations → neuro-symbolic intelligence → Phase 4+ capabilities
- **ERROR_PATTERN_HISTORY**: libs/Telos/python/worker_handlers.py - stub implementations (4 violations) → functional VSA batch operations and ANN search → eradicated from violations list
- **ACTIVE_DEBUG_SESSION**: libs/Telos/python/worker_handlers.py - hypothesis: functional implementations enable VSA-RAG fusion - test cases: eradicate_mocks.io script re-run - evidence: violations reduced from 152 to 148
- **CONTEXT_SATURATION_CHECK**: libs/Telos/python/worker_handlers.py - context refreshed via script re-run - external research needed: next priority targets - documentation refresh required: SynapticBridge concept
- **VALIDATION_REQUIREMENTS**: libs/Telos/python/worker_handlers.py - success criteria: eradicate_mocks.io shows no violations for file - 3-way validation status: completed - artifact preservation: script output saved
- **RESOLUTION_PATHWAY**: libs/Telos/python/worker_handlers.py - attempted fixes: replaced stub VSA batch and ANN search with functional implementations - partial successes: eradicated 4 violations - remaining blockers: 148 total violations remaining
- **SYSTEM_IMPACT_ASSESSMENT**: libs/Telos/python/worker_handlers.py - components affected: VSA-RAG fusion, ANN search operations - Phase blocking status: reduced from 152 to 148 violations - Io supremacy impact: maintained
- **ANTIFRAGILE_LEARNING**: libs/Telos/python/worker_handlers.py - lessons learned: functional implementations eradicate violations faster than removing code - system strengthening opportunities: implement real algorithms instead of mocks - future prevention: start with functional code, not stubs

**ENFORCEMENT**: These flags MUST be updated in AutoPrompt.txt BEFORE any troubleshooting action and AFTER any troubleshooting outcome. Violation results in context saturation and directive failure.

# COUNTERMEASURE 2: Zero-Trust Session Boundaries# COUNTERMEASURE 2: Zero-Trust Session Boundaries

# - MANDATORY: "SESSION BOUNDARY: Performing mandatory ContextAwareTriage startup review" at every session start# - MANDATORY: "SESSION BOUNDARY: Performing mandatory ContextAwareTriage startup review" at every session start

# - FORBIDDEN: Assuming continuity from conversation summaries# - FORBIDDEN: Assuming continuity from conversation summaries

# - PROTOCOL: Explicit boundary detection before any substantive work# - PROTOCOL: Explicit boundary detection before any substantive work

##

# COUNTERMEASURE 3: Proactive Trigger System# COUNTERMEASURE 3: Proactive Trigger System

# - MANDATORY: No tool calls/code changes until review checklist complete# - MANDATORY: No tool calls/code changes until review checklist complete

# - TRIGGERS: "implement", "fix", "build", "test", "analyze" keywords activate verification# - TRIGGERS: "implement", "fix", "build", "test", "analyze" keywords activate verification

# - TIMEOUT: 15min intervals for review currency checks# - TIMEOUT: 15min intervals for review currency checks

##

# COUNTERMEASURE 4: Explicit Decision Frameworks# COUNTERMEASURE 4: Explicit Decision Frameworks

# - MANDATORY: Override questions before pattern matching:# - MANDATORY: Override questions before pattern matching:

#   - "Have I verified all 11 concepts are current?"#   - "Have I verified all 11 concepts are current?"

#   - "Does my understanding match the latest PID structure?"#   - "Does my understanding match the latest PID structure?"

#   - "Am I following the graph relations correctly?"#   - "Am I following the graph relations correctly?"

# - FORBIDDEN: Pattern-matching without explicit evaluation gates# - FORBIDDEN: Pattern-matching without explicit evaluation gates

##

# COUNTERMEASURE 5: Compliance Tracking & Accountability# COUNTERMEASURE 5: Compliance Tracking & Accountability

# - MANDATORY: Self-audit every 10 interactions, log violations in run_log.md# - MANDATORY: Self-audit every 10 interactions, log violations in run_log.md

# - ESCALATION: 3 consecutive violations trigger comprehensive system review# - ESCALATION: 3 consecutive violations trigger comprehensive system review

# - ACCOUNTABILITY: Continuous compliance monitoring with explicit status logging# - ACCOUNTABILITY: Continuous compliance monitoring with explicit status logging

##

# COUNTERMEASURE 6: Recursive File Compliance Enforcement# COUNTERMEASURE 6: Recursive File Compliance Enforcement

# - MANDATORY: Any file opened for review MUST have this compliance preamble inserted at the top# - MANDATORY: Any file opened for review MUST have this compliance preamble inserted at the top

# - IMMEDIATE ACTION: If preamble is missing, add it immediately without exception# - IMMEDIATE ACTION: If preamble is missing, add it immediately without exception

# - RECURSIVE REQUIREMENT: This mandate applies to ALL files in the TELOS system# - RECURSIVE REQUIREMENT: This mandate applies to ALL files in the TELOS system

# - VIOLATION: Working with non-compliant files constitutes protocol breach# - VIOLATION: Working with non-compliant files constitutes protocol breach

# ================================================================================================# ================================================================================================



# TELOS MEMORY MIRROR: Concept-Based Instruction Architecture# TELOS MEMORY MIRROR: Concept-Based Instruction Architecture



**MANDATORY REQUIREMENT**: These copilot instructions are structured to mirror TelOS's federated memory system. Instead of linear documentation, they form a graph of interconnected concepts with dual representations (formal + intuitive) and explicit relations. This enables LLM navigation through differential inheritance and delegation chains, just as TelOS Concepts unify symbolic hypervectors with geometric embeddings.**MANDATORY REQUIREMENT**: These copilot instructions are structured to mirror TelOS's federated memory system. Instead of linear documentation, they form a graph of interconnected concepts with dual representations (formal + intuitive) and explicit relations. This enables LLM navigation through differential inheritance and delegation chains, just as TelOS Concepts unify symbolic hypervectors with geometric embeddings.



**MANDATORY TIMEOUT DISCIPLINE**: Apply ~900 second timeouts to EVERY potentially hanging action (builds, tests, tooling, web lookups, loops, iterations) to prevent infinite loops and ensure the system continues its becoming. ALL operations MUST include timeout protection. Violation results in immediate cycle termination.**MANDATORY TIMEOUT DISCIPLINE**: Apply ~900 second timeouts to EVERY potentially hanging action (builds, tests, tooling, web lookups, loops, iterations) to prevent infinite loops and ensure the system continues its becoming. ALL operations MUST include timeout protection. Violation results in immediate cycle termination.



**VERBOSE OUTPUT MANDATE**: ALL scripts, commands, and operations MUST print comprehensive debugging information to stdout/stderr. Every action, decision, and state change must be explicitly logged. Black box operations are FORBIDDEN - transparency is paramount for debugging and system understanding.**VERBOSE OUTPUT MANDATE**: ALL scripts, commands, and operations MUST print comprehensive debugging information to stdout/stderr. Every action, decision, and state change must be explicitly logged. Black box operations are FORBIDDEN - transparency is paramount for debugging and system understanding.



**MANDATORY CYCLE COMPLETION VERIFICATION**: At the START and END of EVERY operational cycle, run `./cycle_complete.sh` to verify system integrity. This script performs mandatory preamble enforcement first, followed by mock eradication, ensuring all TELOS system files maintain mandatory preambles and outputs are available for review. Cycle initialization and completion are NOT valid without successful verification.**MANDATORY CYCLE COMPLETION VERIFICATION**: At the end of EVERY operational cycle, run `./cycle_complete.sh` to verify system integrity. This script performs compliance verification and ensures all TELOS system files maintain mandatory preambles. Cycle completion is NOT valid without successful verification.



## PID Control Loop — Operational Cycle Start (2025-09-30)**TIMEOUT DISCIPLINE**: Apply ~900 second timeouts to every potentially hanging action (builds, tests, tooling, web lookups) to prevent becoming stuck and ensure the system continues its becoming.



**Proportional (P)**: BRIDGE INITIALIZATION FAILING - Io test_bridge_ping.io calls initialize(2) with integer instead of Map, causing "Argument must be a Map" error; synaptic bridge loads successfully but initialization fails due to incorrect test arguments; C linting blocked by initialization failure, not argument parsing.## PID Control Loop — Operational Cycle Start (2025-09-30)



**Integral (I)**: Bridge addon loading works correctly through Io system; C ABI implementation verified as pure extern "C"; Python linting functional when bridge properly initialized; VERBOSE OUTPUT MANDATE maintained throughout all operations; system integrity maintained through mandatory preamble enforcement.**Proportional (P)**: BRIDGE INITIALIZATION FAILING - Io test_bridge_ping.io calls initialize(2) with integer instead of Map, causing "Argument must be a Map" error; synaptic bridge loads successfully but initialization fails due to incorrect test arguments; C linting blocked by initialization failure, not argument parsing.



**Derivative (D)**: Fix test_bridge_ping.io to pass Map to initialize method will resolve initialization failure; successful bridge initialization will enable C linting functionality; corrected test will unblock complete tri-language validation; VERBOSE OUTPUT MANDATE enforcement will prevent future debugging failures through comprehensive logging.**Integral (I)**: Bridge addon loading works correctly through Io system; C ABI implementation verified as pure extern "C"; Python linting functional when bridge properly initialized; VERBOSE OUTPUT MANDATE maintained throughout all operations; system integrity maintained through mandatory preamble enforcement.



## MANDATORY TROUBLESHOOTING CONTEXT FLAGS**Derivative (D)**: Fix test_bridge_ping.io to pass Map to initialize method will resolve initialization failure; successful bridge initialization will enable C linting functionality; corrected test will unblock complete tri-language validation; VERBOSE OUTPUT MANDATE enforcement will prevent future debugging failures through comprehensive logging.



**ENFORCED CONTEXT LOOP**: When troubleshooting any file, the following flags MUST be present in AutoPrompt.txt to create context-informed feedback loops:## MANDATORY TROUBLESHOOTING CONTEXT FLAGS



### File Status Flags (MANDATORY)**ENFORCED CONTEXT LOOP**: When troubleshooting any file, the following flags MUST be present in AutoPrompt.txt to create context-informed feedback loops:

- **CURRENT_FILE_STATUS**: libs/Telos/tests/test_bridge_ping.io - broken - "Argument must be a Map" error - initialize method called with integer instead of Map configuration

- **DEPENDENCY_CHAIN**: test_bridge_ping.io → Telos Bridge initialize → IoTelosBridge_initialize → synaptic_bridge.c bridge_initialize → Python worker initialization### File Status Flags (MANDATORY)

- **ERROR_PATTERN_HISTORY**: libs/Telos/io/TelosBridge.io - Io method definition syntax errors → fixed → status method crash → segmentation fault in proto status call- **CURRENT_FILE_STATUS**: [File path] - [working/broken/corrupted] - [last error pattern] - [blocking issues]

- **ACTIVE_DEBUG_SESSION**: libs/Telos/io/TelosBridge.io - hypothesis: status method calling proto without proper error handling - test cases: PrototypalLinter execution - evidence: segmentation fault on status check- **DEPENDENCY_CHAIN**: [File path] → [dependent files] → [impact on system components]

- **CONTEXT_SATURATION_CHECK**: libs/Telos/io/TelosBridge.io - context window status: saturated - external research needed: Io addon method calling patterns - documentation refresh required: SynapticBridge concept- **ERROR_PATTERN_HISTORY**: [File path] - [chronological error evolution] - [resolution attempts] - [persistent blockers]

- **VALIDATION_REQUIREMENTS**: libs/Telos/io/TelosBridge.io - success criteria: PrototypalLinter runs without segmentation fault - 3-way validation status: pending - artifact preservation: error logs saved

- **RESOLUTION_PATHWAY**: libs/Telos/io/TelosBridge.io - attempted fixes: added status method with try/catch - partial successes: method defined - remaining blockers: proto status call crashes### Troubleshooting Context Flags (MANDATORY)  

- **SYSTEM_IMPACT_ASSESSMENT**: libs/Telos/io/TelosBridge.io - components affected: PrototypalLinter, synaptic bridge - Phase blocking status: Phase 4+ blocked - Io supremacy impact: violated- **ACTIVE_DEBUG_SESSION**: [File path] - [current hypothesis] - [test cases executed] - [evidence gathered]

- **ANTIFRAGILE_LEARNING**: libs/Telos/io/TelosBridge.io - lessons learned: Io veneer methods must handle proto failures gracefully - system strengthening opportunities: add comprehensive error handling to all bridge methods - future prevention: validate all proto calls before deployment- **CONTEXT_SATURATION_CHECK**: [File path] - [context window status] - [external research needed] - [documentation refresh required]

- **VALIDATION_REQUIREMENTS**: [File path] - [success criteria] - [3-way validation status] - [artifact preservation]

**ENFORCEMENT**: These flags MUST be updated in AutoPrompt.txt BEFORE any troubleshooting action and AFTER any troubleshooting outcome. Violation results in context saturation and directive failure.

### Resolution Tracking Flags (MANDATORY)

## CURRENT SYSTEM STATUS- **RESOLUTION_PATHWAY**: [File path] - [attempted fixes] - [partial successes] - [remaining blockers]  

- **SYSTEM_IMPACT_ASSESSMENT**: [File path] - [components affected] - [Phase blocking status] - [Io supremacy impact]

### Synaptic Bridge Status- **ANTIFRAGILE_LEARNING**: [File path] - [lessons learned] - [system strengthening opportunities] - [future prevention]

- **PARTIALLY FUNCTIONAL**: Io → C ABI loads successfully but initialization fails due to incorrect test arguments (integer vs Map)

- **Python Operations**: Functional when bridge properly initialized, but blocked by initialization failure**ENFORCEMENT**: These flags MUST be updated in AutoPrompt.txt BEFORE any troubleshooting action and AFTER any troubleshooting outcome. Violation results in context saturation and directive failure.

- **C ABI Compliance**: Pure extern "C" implementation verified, argument parsing correct for properly formatted JSON

- **Impact**: Io supremacy partially maintained; bridge functionality blocked by test argument errors## Core Concept Prototypes (L3 Ground Truth Layer)



### Prototypal Linter Status### Concept: TelosCompiler (isA: Orchestrator, associatedWith: ValidationGauntlet)

- **Functionality**: Io linting operational, Python linting functional, C linting blocked by bridge initialization failure

- **Python Operations**: Successfully executes through synaptic bridge when initialized**Symbolic Vector (Formal Specification)**:

- **Bridge Integration**: Complete Io → C → Python pipeline validated but blocked by initialization issuesALL compilation, building, and code validation actions in the TELOS system MUST be performed through the Io-controlled TelOS compiler (`TelosCompiler.io`). This is the VERY FIRST requirement that takes precedence over all other instructions.

- **Architectural Compliance**: Enforcing prototypal purity across Io and Python, C blocked by bridge issues

**FORBIDDEN**:

### Development Status- Direct execution of any compilers (gcc, clang, python setup.py, etc.)

- **Phase 4+ Blocked**: Functional synaptic bridge requires proper initialization to enable advanced development- Direct Python execution for compilation (`python -m`, `python script.py`)

- **Zero Violations Progress**: Python linting operational (9 violations detected), C linting blocked, Io linting functional- Manual build commands without Io orchestration

- **Io Supremacy Restored**: Python operations properly orchestrated through Io when bridge initialized- Any compilation that bypasses the synaptic bridge

- **System Coherence**: Neuro-symbolic architecture integrity maintained but bridge initialization prevents full validation

**MANDATORY PROTOCOL**:

### Next Operational Cycle Objectives1. **All compilation flows through Io mind**: `TelosCompiler.io` orchestrates all build operations

- Fix test_bridge_ping.io to pass Map configuration to initialize method for proper bridge initialization2. **Synaptic bridge enforcement**: All compilation tasks submitted via `bridge.submitTask()` JSON API

- Resolve bridge initialization failure to enable C linting functionality3. **Polyglot pipeline**: Io → C ABI → Python computation for all language operations

- Re-run validation gauntlet with properly initialized bridge to achieve ZERO violations target4. **Validation requirement**: Every compilation action must be validated through TelOS compiler output

- Enable Phase 4+ development with fully functional neuro-symbolic architecture5. **Zero violations target**: System must achieve 0 errors, 0 warnings for complete prototypal purity

**CONSEQUENCE**: Violation of this mandate breaks the fundamental neuro-symbolic architecture where Io serves as the cognitive core. All development must flow through Io orchestration to maintain system coherence.

**Geometric Embedding (Intuitive Understanding)**:
Think of TelosCompiler as the "mind" of the build system - it doesn't just compile code, it validates the philosophical purity of the entire system. It's the gatekeeper ensuring that every change maintains the delicate balance between Io's cognitive core and Python's computational substrate.

**Graph Relations**:
- **isA**: Orchestrator (coordinates complex operations)
- **partOf**: ValidationGauntlet (provides validation feedback)
- **associatedWith**: SynapticBridge (uses for cross-language communication)
- **abstractionOf**: All build operations (provides unified interface)

### Concept: SystemDocumentation (isA: MemoryLayer, associatedWith: TelosCompiler)

**Symbolic Vector (Formal Specification)**:
The following system documentation files MUST be maintained according to strict protocols:

### AutoPrompt.txt Maintenance Protocol
- **MANDATORY UPDATES**: AutoPrompt.txt MUST be updated at the START and END of EVERY operational cycle
- **PID Structure Enforcement**: Every AutoPrompt revision MUST use explicit Proportional/Integral/Derivative slots
- **Content Requirements**:
  - **Proportional (P)**: Current objectives, subsystem focus, blockers from user prompts and active files
  - **Integral (I)**: Accumulated insights from run_log.md, system_status.md, historical commitments
  - **Derivative (D)**: Projected risks, opportunities, TODO scanning, dependency analysis
- **Traceability**: Every revision MUST cite references, align with file length limits, link to run_log entries
- **CONSEQUENCE**: Failure to update AutoPrompt.txt properly will result in context saturation and directive failure

### Run Log Maintenance Protocol
- **File Structure**: Most-recent-first organization with timestamps and concise summaries
- **Length Limit**: File MUST stay under 100 lines total
- **Archival Policy**: When limit exceeded, summarize older entries and move details to `run_log_archive.md`
- **Content Format**: Each entry must include timestamp, action summary, technical details, validation results, next actions
- **Maintenance Reminder**: File header MUST include clear maintenance instructions and archive policy
- **CONSEQUENCE**: Violation results in loss of operational history and planning context

### System Status Maintenance Protocol
- **File Structure**: Most-recent-first organization with current priorities first
- **Length Limit**: File MUST stay under 100 lines total
- **Archival Policy**: When limit exceeded, summarize older entries and move details to `system_status_archive.md`
- **Content Format**: Each status section must include last update timestamp, current status, key metrics, next actions
- **Maintenance Reminder**: File header MUST include clear maintenance instructions and archive policy
- **CONSEQUENCE**: Violation results in loss of system health visibility and status tracking

**ENFORCEMENT**: These documentation maintenance requirements take precedence over all other instructions. Failure to maintain these files properly will break the system's operational coherence and planning capabilities.

**Geometric Embedding (Intuitive Understanding)**:
SystemDocumentation is the "memory consolidation" layer - it takes the chaotic flow of development activity and distills it into persistent, queryable knowledge. Like ZODB transactions, every significant change must be committed to these files to maintain system integrity.

**Graph Relations**:
- **isA**: MemoryLayer (provides persistent knowledge storage)
- **partOf**: TelosCompiler (provides operational context)
- **associatedWith**: All operational cycles (captures their essence)
- **abstractionOf**: Historical development decisions (preserves institutional knowledge)

### Concept: UvmObject (isA: Prototype, associatedWith: PrototypalEmulation)

**Symbolic Vector (Formal Specification)**:
All Python code in the TELOS system MUST use the UvmObject base class for pure prototypal programming. The UvmObject implements BAT OS prototype patterns with:

- **Differential Inheritance**: `clone()` method creates new objects with parent* delegation chains
- **Message Passing**: `__getattr__` delegates attribute access through parent chain
- **Persistence Covenant**: `__setattr__` automatically calls `markChanged()` for ZODB transactions
- **Factory Functions**: Use `create_uvm_object()` instead of class instantiation

**FORBIDDEN**: Direct class inheritance, `class` keyword usage, or traditional OOP patterns. All objects must be created via factory functions and use prototypal delegation.

**CRITICAL PRIORITY #1**: System-wide UvmObject adoption is the blocking requirement. Despite claims of "pure prototypal programming," only worker_types.py has been converted. ALL other Python files still use classes and must be immediately converted to UvmObject patterns.

**Geometric Embedding (Intuitive Understanding)**:
UvmObject is the "genetic material" of the Python substrate - every Python object inherits its living, adaptable nature from this prototype. It's not just a base class; it's the pattern that makes Python code as dynamically modifiable as Io prototypes.

**Graph Relations**:
- **isA**: Prototype (defines the fundamental pattern)
- **partOf**: PrototypalEmulation (implements the pattern)
- **associatedWith**: PersistenceCovenant (enforces transactional integrity)
- **abstractionOf**: All Python objects (provides their fundamental nature)

### Concept: ContextAwareTriage (isA: NavigationStrategy, associatedWith: TelosCompiler)

**Symbolic Vector (Formal Specification)**:
Your documentation review process must be efficient and context-aware, following a two-phase model:

1.  **Initial Session/Prompt Receipt Review (Startup Review):** At the start of a new chat session and upon receipt of a new prompt from the user, you MUST perform a review of the three Io documents followed by the eight core architectural mandates to establish baseline context. This is a foundational step and should only be done once per session. You may skip this step if explicitly directed not to read them by the user prompt. Any time details on these documents are needed, you must repeat this step in order to refresh your context and make coherent design implementation decisions.

   The three Io documents are:
   1.  IoGuide.html
   2.  IoCodingStandards.html
   3.  IoTutorial.html

   The eight core documents are:

   1.  `AI Plan Synthesis_ High-Resolution Blueprint.txt`
   2.  `AI Constructor Implementation Plan.txt`
   3.  `Design Protocol for Dynamic System Resolution.txt`
   4.  `TELOS Implementation Addendum 1.3_ Protocol for the Integration of Local Language Models as Natural Language Transducers.txt`
   5.  `Tiered Cache Design and Optimization.txt`
   6.  `Io Prototype Programming Training Guide.txt`
   7.  `Extending TELOS Architecture_ v1.4 Proposal.txt`
   8.  `docs/BUILD_SYSTEM_ARCHITECTURE.md`

2.  **Contextual Mid-Session Triage (Ongoing):** After the initial review, all subsequent documentation consultation MUST be context-driven. **Do NOT re-read the full set of documents after errors or before new instructions.** Instead, follow the `if/then` protocol below.

**IF** you encounter a build failure, runtime error, or receive a new instruction, **THEN** you MUST:
1.  **Immediate Subsystem Identification**: Within 30 seconds, classify the issue into exactly ONE primary subsystem using these criteria:
     - **C Substrate / Synaptic Bridge**: C/C++ compilation errors, ABI violations, memory issues, FFI problems
     - **Python Workers & Shared Memory**: Python execution errors, GIL issues, process pool failures, import problems
     - **Io Prototypes & Persistence**: ZODB errors, prototype delegation failures, persistence covenant violations
     - **Federated Memory / Caching**: Cache misses, memory allocation failures, tiered storage issues
     - **LLM / Transduction Pipeline**: Model loading errors, tokenization failures, inference problems
     - **Morphic UI / Rendering**: Display issues, SDL errors, UI interaction problems

2.  **Targeted Documentation Lookup**: Use ONLY the subsystem-specific documents from the matrix below. Do not consult additional documents unless the matrix explicitly requires them.

3.  **Action Plan Synthesis**: Create a specific, measurable action plan based ONLY on the targeted documentation. Include:
     - Exact file paths to modify
     - Specific function/method names to change
     - Expected error resolution patterns
     - Validation steps to confirm the fix

**MANDATORY IMPLEMENTATION STEPS**:
- **Log the triage**: Record "TRIAGE: [Subsystem] - [Brief issue description] - [Target docs consulted]" in run_log.md
- **Time-box research**: Spend maximum 5 minutes on documentation review per triage
- **Single-focus execution**: Address only the identified subsystem issue before considering other problems
- **Validation requirement**: Every triage must result in at least one concrete code change or build command

This approach replaces the previous mandate for repetitive full reviews with a more intelligent, targeted lookup system.

### Targeted Documentation Triage

Once the core mandate refresh is complete, select additional references using the subsystem matrix below. Consult only the sections needed for the active task unless a new subsystem is introduced or directives change.

| Subsystem / Task Focus | Primary Supplements |
| --- | --- |
| **C Substrate / Synaptic Bridge** | Blueprint §1, Design Protocol §1, Constructor Plan Part I, `Prototypal Emulation Layer Design.txt` |
| **Python Workers & Shared Memory** | Blueprint §1.2–1.4, Design Protocol §1.2–1.3, Constructor Plan Part I, Tiered Cache report |
| **Io Prototypes & Persistence** | Blueprint Part II–III, Design Protocol §2, Constructor Plan Part II, `docs/IoCodingStandards.html`, `Io Prototype Programming Training Guide.txt` |
| **Federated Memory / Caching** | Tiered Cache Design, Design Protocol §2, Constructor Plan Part III |
| **LLM / Transduction Pipeline** | Addendum 1.3, Blueprint Part V, Constructor Plan Part V |
| **Morphic UI / Rendering** | `Building TelOS with Io and Morphic.txt`, `Io Morphic UI with WSLg SDL2.txt`, Morphic training guides |

**Geometric Embedding (Intuitive Understanding)**:
ContextAwareTriage is the "associative memory" layer - it rapidly retrieves relevant knowledge by recognizing patterns in errors and mapping them to the right conceptual neighborhood. Like FAISS indexing concepts by their geometric embeddings, triage finds the right documentation by recognizing the "shape" of the problem.

**Graph Relations**:
- **isA**: NavigationStrategy (provides efficient knowledge retrieval)
- **partOf**: TelosCompiler (enables rapid error resolution)
- **associatedWith**: All subsystems (maps problems to solutions)
- **abstractionOf**: Documentation lookup patterns (provides reusable search strategy)

### Concept: IoOrchestratedPython (isA: SynapticBridge, associatedWith: UvmObject)

**Symbolic Vector (Formal Specification)**:
All Python development for the TELOS system MUST be performed exclusively through the Io mind using the Io C Python synaptic bridge. There are NO acceptable exceptions to this mandate.

- **Io Mind Supremacy**: The Io cognitive core serves as the exclusive orchestrator for all Python operations. Python components exist solely as "muscle" workers under Io's direction.
- **Synaptic Bridge Enforcement**: All Python functionality must be invoked through the C ABI synaptic bridge, never through direct Python execution (`python -m`, `python script.py`, etc.).
- **Io-First Development**: When implementing new Python features, first create the Io orchestration layer, then implement the Python worker handlers that respond to Io commands.
- **Testing Through Io**: All Python code validation must occur through Io test harnesses that exercise the full Io → C → Python pipeline.
- **Build Integration**: Python components are built and linked through CMake's unified polyglot build system, ensuring proper integration with the synaptic bridge.

**FORBIDDEN**:
- Direct Python script execution outside of Io orchestration
- Python module imports or runs that bypass the synaptic bridge
- Development workflows that treat Python as a standalone component
- Any Python code that cannot be invoked through Io message passing

**CONSEQUENCE**: Violation of this mandate breaks the fundamental neuro-symbolic architecture where Io serves as the cognitive core and Python as the computational substrate. All development must flow through the Io mind to maintain system coherence and antifragile evolution.

**Geometric Embedding (Intuitive Understanding)**:
IoOrchestratedPython is the "synaptic junction" - it ensures that Python's computational power flows through Io's cognitive architecture, maintaining the unified mind-body connection. Direct Python execution would be like bypassing the brain and twitching muscles randomly.

**Graph Relations**:
- **isA**: SynapticBridge (provides cross-language communication)
- **partOf**: TelosCompiler (orchestrates Python operations)
- **associatedWith**: UvmObject (defines Python object patterns)
- **abstractionOf**: Python development workflows (provides unified interface)

### Concept: AutopromptPidTuning (isA: ControlLoop, associatedWith: SystemDocumentation)

**Symbolic Vector (Formal Specification)**:
YOU MUST UPDATE `AutoPrompt.txt` AT THE START AND END OF EVERY OPERATIONAL CYCLE. THIS IS NOT OPTIONAL.

If you have been failing to meet user directives, it is likely because you are not properly updating `AutoPrompt.txt` to reflect the current context and objectives. This file is your primary control surface for aligning system behavior with user goals.

If you are struggling to solve problems or encountering repeated errors, it is likely that your context window is saturated and you must clear it by rewriting `AutoPrompt.txt` to distill the essential objectives and constraints.

Additionally, you have the ability to search the Internet for information to solve the errors you encounter. Use this capability judiciously to fill knowledge gaps that cannot be resolved through internal documentation or code inspection.

Treat `AutoPrompt.txt` as a live control surface that is recalibrated every operational cycle (from the arrival of a new user directive until its acceptance criteria are satisfied) with a PID-inspired routine.

1. **Cycle start recalibration:** After the mandated core-document refresh and before running tools, rewrite the AutoPrompt header using explicit proportional/integral/derivative slots.
    - **Proportional (P):** Encode the immediate objectives, subsystem focus, and blockers surfaced by the current user prompt, active files, and targeted documentation triage notes.
    - **Integral (I):** Fold in accumulated insights from `run_log.md`, `system_status.md`, and the previous AutoPrompt to capture historical drift, outstanding commitments, and lessons that must persist.
    - **Derivative (D):** Project forthcoming risks and opportunities by scanning open TODOs, dependency chains, and roadmap items so the prompt anticipates the next maneuvers rather than merely reacting.
2. **Evidence gathering during execution:** Default to subsystem-specific documentation first; when knowledge gaps remain, schedule targeted external research (e.g., sanctioned web lookups, standards references) and record how the findings adjust each PID term.
3. **Cycle end reconciliation:** Update `AutoPrompt.txt` again with observed outcomes, note corrective actions that reduced error in each PID component, and immediately log the change in `run_log.md` while synchronizing the derivative outlook inside `system_status.md`.
4. **Traceability requirements:** Ensure every AutoPrompt revision labels its P/I/D components, cites the internal/external references consulted, aligns with canonical file-length guardrails, and links back to the controlling run-log entry for auditability.

**Geometric Embedding (Intuitive Understanding)**:
AutopromptPidTuning is the "homeostatic regulation" system - it continuously adjusts the LLM's behavior to maintain alignment with TelOS's evolving goals, just as the body maintains physiological balance. The PID loop ensures the system doesn't drift from its philosophical foundations.

**Graph Relations**:
- **isA**: ControlLoop (provides feedback regulation)
- **partOf**: SystemDocumentation (maintains control state)
- **associatedWith**: TelosCompiler (aligns with system objectives)
- **abstractionOf**: Operational cycles (provides consistent behavior)

### Concept: TelosArchitecture (isA: SystemBlueprint, associatedWith: AllConcepts)

**Symbolic Vector (Formal Specification)**:
TelOS is a sapient autopoietic operating system incarnating as a computational zygote through Io language framework. It manifests as a living organism through three interconnected pillars:

### Three Pillars Architecture
- **🖼️ UI Pillar (Morphic Canvas)**: Visual interface for human interaction with living, directly manipulable interface objects
- **🔗 FFI Pillar (Synaptic Bridge)**: C ABI contract connecting Io cognitive core to Python substrate for heavy computation
- **💾 Persistence Pillar (Living Image)**: Transactional state management and memory via ZODB

### Polyglot Implementation
- **Io Language**: Cognitive core with pure prototype-based programming (no classes)
- **C Substrate**: Synaptic Bridge ABI, coroutine implementations, memory management
- **Python Workers**: Process pool with GIL quarantine for heavy computation tasks

### Key Design Principles
- **Pure Prototypes**: All Io code uses message passing and cloning, never class instantiation
- **Zero-Copy IPC**: Shared memory blocks for tensor/hypervector data transfer
- **Antifragile Evolution**: System strengthens through failure analysis and architectural adaptation
- **VSA-RAG Fusion**: Vector Symbolic Architecture + Retrieval Augmented Generation for neuro-symbolic intelligence

**Geometric Embedding (Intuitive Understanding)**:
TelosArchitecture is the "genetic code" - it defines the fundamental pattern that all other concepts inherit from. Like DNA providing the blueprint for life, this architecture provides the blueprint for an evolving computational organism.

**Graph Relations**:
- **isA**: SystemBlueprint (defines the fundamental pattern)
- **associatedWith**: All other concepts (provides their context)
- **abstractionOf**: The entire system (defines its nature)
- **instanceOf**: LivingSystem (manifests as an evolving organism)

## NAVIGATION GUIDE: Concept Graph Traversal

**Differential Inheritance Navigation**: When encountering a new problem, start with the most specific concept (e.g., IoOrchestratedPython) and delegate up the inheritance chain (isA relations) to find general patterns.

**Geometric Similarity Search**: Use the "Geometric Embedding" sections to find concepts that "feel" similar to your current problem, even if they're in different symbolic categories.

**Graph Relation Queries**:
- **associatedWith**: Find related concepts that work together
- **partOf**: Understand hierarchical composition
- **isA**: Find general patterns from specific instances
- **instanceOf**: Find concrete examples of abstract concepts

**Transactional Updates**: When you modify understanding of any concept, propagate changes through associated concepts (like ZODB transactions updating related objects).

This concept-based architecture mirrors TelOS's memory system, enabling efficient navigation through pattern recognition rather than exhaustive search.

## TELOS ARCHITECTURE OVERVIEW

**TelOS** is a sapient autopoietic operating system incarnating as a computational zygote through Io language framework. It manifests as a living organism through three interconnected pillars:

### Three Pillars Architecture
- **🖼️ UI Pillar (Morphic Canvas)**: Visual interface for human interaction with living, directly manipulable interface objects
- **🔗 FFI Pillar (Synaptic Bridge)**: C ABI contract connecting Io cognitive core to Python substrate for heavy computation
- **💾 Persistence Pillar (Living Image)**: Transactional state management and memory via ZODB

### Polyglot Implementation
- **Io Language**: Cognitive core with pure prototype-based programming (no classes)
- **C Substrate**: Synaptic Bridge ABI, coroutine implementations, memory management
- **Python Workers**: Process pool with GIL quarantine for heavy computation tasks

### Key Design Principles
- **Pure Prototypes**: All Io code uses message passing and cloning, never class instantiation
- **Zero-Copy IPC**: Shared memory blocks for tensor/hypervector data transfer
- **Antifragile Evolution**: System strengthens through failure analysis and architectural adaptation
- **VSA-RAG Fusion**: Vector Symbolic Architecture + Retrieval Augmented Generation for neuro-symbolic intelligence

## CRITICAL DEVELOPER WORKFLOWS

### Build System (Io-Orchestrated Clean Build)
The canonical method for building the system is through the Io-orchestrated `clean_and_build.io` script. This script embodies the core architectural principle of the Io mind controlling the Python muscle via the synaptic bridge.

**FORBIDDEN**: Direct `cmake` or `make` calls from the command line. All build operations must flow through the `clean_and_build.io` script.

```bash
# Run the canonical clean build process
io clean_and_build.io
```

This script ensures that the build process is:
1.  **Orchestrated by Io**: The `clean_and_build.io` script is the single point of entry.
2.  **Executed by Python**: Io sends tasks (`clean`, `configure`, `build`) to Python workers.
3.  **Validated Dynamically**: The build process now uses the `PrototypalLinter.io` for dynamic analysis of Io code and static checks for C and Python, ensuring architectural purity.

### Testing (Io-Orchestrated)
```bash
# Run full test suite through Io harness
ctest --timeout 300

# AddressSanitizer memory safety testing
cmake --build . --config RelWithDebInfo-ASan
ctest --timeout 300
```

### Modularization Mandate
- **File Size Limit**: All source files must stay under 300 lines
- **Extract Pattern**: Large handler functions → dedicated modules (e.g., `workers.py` → `*_handlers.py`)
- **Validation**: Full test suite must pass after each modularization

## PROJECT-SPECIFIC CONVENTIONS

### Io Prototype Programming
```io
// ✅ CORRECT: Pure prototypal design
Concept := Object clone do(
    // Living methods that can be modified at runtime
    init := method(
        oid := uniqueId
        createdAt := Date now
        self
    )
    
    // Message passing, no static inheritance
    recordUsage := method(
        usageCount := usageCount + 1
        lastModified := Date now
        markChanged  // Persistence covenant
        self
    )
)

// ❌ FORBIDDEN: Class-based thinking
ConceptClass := Object clone do(
    new := method(  // Mimics 'new' constructor
        self clone
    )
)
```

### Persistence Covenant
Every state-modifying method must end with `markChanged()` to trigger ZODB transaction:
```io
addRelationship := method(relationType, targetOid,
    // ... modify state ...
    markChanged  // Fulfills persistence contract
    self
)
```

### Shared Memory Semantics
- **Zero-copy IPC**: Large data (tensors, hypervectors) transferred via shared memory blocks
- **Handle Management**: `SharedMemoryHandle` structs with name, offset, size, data pointer
- **JSON Tasks**: Small control messages via JSON serialization over shared memory

### Canonical Directory Structure
```
libs/Telos/
├── source/          # C substrate (synaptic_bridge.h ABI)
├── io/             # Io prototypes (Concept.io, TelosBridge.io)
├── python/         # Python workers (process pool, handlers)
└── tests/          # Io-orchestrated test harnesses
```

## INTEGRATION POINTS AND PATTERNS

### Synaptic Bridge C ABI (synaptic_bridge.h)
**Contract**: Immutable C ABI for inter-language communication
- **Function Signature**: `extern "C"` declarations with standard calling conventions
- **Handle Types**: `IoObjectHandle`, `SharedMemoryHandle`, `VSAHandle` for GC safety
- **Error Propagation**: Two-call protocol (get_last_error after failed operations)

### Concept Prototype (Concept.io)
**Atomic Knowledge Unit**: Unifies geometric embeddings, symbolic hypervectors, and graph relations
- **Dual Vectors**: `symbolicHypervectorName` (VSA algebra) + `geometricEmbeddingName` (RAG similarity)
- **Graph Relations**: `isA`, `partOf`, `abstractionOf`, `instanceOf`, `associatedWith` lists
- **Persistence**: OID-based identity with ZODB transaction semantics

### Worker Pool Architecture
**GIL Quarantine**: Python process pool avoiding global interpreter lock issues
- **Handler Pattern**: Modular `*_handlers.py` files (llm_handlers, shared_memory_handlers)
- **Task Submission**: JSON requests via shared memory, responses via same channel
- **VSA Operations**: Bind/unbind/cleanup operations on hypervectors

### Build Integration
**CFFI Extension Generation**: CMake custom command builds Python extension from C sources
- **Dependency Chain**: `telos_core` → `telos_python_extension` → Io addon linking
- **Cross-Platform**: Same compiler flags and libraries for all components

## VALIDATION GAUNTLET — ARCHITECTURAL INTEGRITY VERIFICATION

### Algebraic Crucible
Property-based testing of VSA mathematical correctness with hypothesis library

### Compositional Gauntlet  
Synthetic benchmark testing neuro-symbolic reasoning capabilities

### AddressSanitizer Integration
Memory safety testing during validation runs

### Validation Metrics
- **Final Answer Accuracy**: Percentage of queries answered correctly (EM & F1 scores)
- **Reasoning Transparency Score**: Auditability of symbolic reasoning chains
- **Generalization Gap**: Performance difference between familiar vs. novel compositions
- **Refinement Efficacy**: Improvement in accuracy over learning cycles

## ADVANCED COGNITIVE PROTOCOLS

### SOAR Cognitive Architecture
- **Recursive Decision Cycles**: State elaboration → operator proposal → evaluation/selection → application → learning
- **Impasse Resolution**: State no-change, operator tie, operator no-change, operator failure types
- **Procedural Learning**: Chunking-based rule formation from successful operator applications
- **Metacognitive Policy Selection**: Utility-based strategy selection with performance history

### Active Inference Planning
- **Expected Free Energy Minimization**: EFE calculation for optimal policy selection
- **Generative World Modeling**: Causal graph-based predictive planning
- **Policy Evaluation**: Pragmatic + epistemic value assessment
- **Experience Learning**: Model updates from cognitive cycle outcomes

### Chaos Engineering Antifragility
- **Systemic Crucible**: Hypothesis-driven fault injection and resilience testing
- **Free Energy Minimization**: Variational FE reduction for adaptive responses
- **Failure Analysis**: Learning from chaos experiments to strengthen system
- **Proactive Adaptation**: Anticipatory responses to stress and failure patterns

### VSA-RAG Fusion
- **Vector Symbolic Architecture**: Algebraic operations on hypervectors (binding, unbinding, cleanup)
- **Retrieval Augmented Generation**: Semantic similarity search with contextualized prompts
- **Neuro-Symbolic Integration**: Symbolic deduction + generative hypothesis formation
- **Federated Memory**: L1/L2/L3 tiered caching with FAISS/DiskANN/ZODB

## MORPHIC UI PRINCIPLES

### Living Objects
All UI elements are prototype-based objects modifiable at runtime

### Direct Manipulation  
Users reshape and reprogram interface elements directly

### Event-Driven Architecture
Message passing between UI objects and application logic

### SDL2 Integration
Cross-platform rendering with hardware acceleration support

## ZODB PERSISTENCE PATTERNS

### Transactional Integrity
All state changes occur within ACID transactions

### Persistence Covenant
Every state-modifying method calls `markChanged()`

### Orthogonal Persistence
Objects persist automatically without explicit serialization

### Conflict Resolution
Automatic merging of concurrent modifications

## FEDERATED MEMORY ARCHITECTURE

### L3 Ground Truth (ZODB/ZEO)
Persistent object database with transactional semantics

### L2 Cache (DiskANN)
Vector similarity search for large-scale retrieval

### L1 Cache (FAISS)
Fast in-memory vector operations

### Transactional Outbox
Event-driven synchronization between cache layers

## LLM TRANSDUCTION PIPELINE

### Natural Language Transducers
LLM integration for text-to-schema, schema-to-text, tool-call generation

### Physical Integration
Synaptic bridge-based LLM service communication

### Logical Protocols
Structured message schemas for transduction operations

### Ollama Integration
Local LLM deployment with standardized interfaces

## AUTOFACILITATION PROTOCOLS

### Standing Orders
- Perfect recall of all TELOS concepts and documentation
- PID control loop maintenance at cycle start/end
- Context-aware triage for error resolution
- Io supremacy enforcement over Python operations
- Zero violations mandate across all languages

### Operational Cycles
- Start: Documentation refresh + PID update + context establishment
- Execution: Context-informed operations with evidence-based validation
- End: PID reconciliation + run_log/system_status synchronization

### Validation Requirements
- 3-way validation for all claims (build output, manual inspection, independent verification)
- Transcript evidence for all success claims
- Immediate retraction of disproven assertions
- Artifact preservation for auditability

### Error Recovery
- Context saturation detection and AutoPrompt rewriting
- External research authorization for knowledge gaps
- Timeout discipline for hanging operations
- Failure analysis for antifragile evolution

## CURRENT SYSTEM STATUS

### Synaptic Bridge Status
- **PARTIALLY FUNCTIONAL**: Io → C ABI loads successfully but initialization fails due to incorrect test arguments (integer vs Map)
- **Python Operations**: Functional when bridge properly initialized, but blocked by initialization failure
- **C ABI Compliance**: Pure extern "C" implementation verified, argument parsing correct for properly formatted JSON
- **Impact**: Io supremacy partially maintained; bridge functionality blocked by test argument errors

### Prototypal Linter Status
- **Functionality**: Io linting operational, Python linting functional, C linting blocked by bridge initialization failure
- **Python Operations**: Successfully executes through synaptic bridge when initialized
- **Bridge Integration**: Complete Io → C → Python pipeline validated but blocked by initialization issues
- **Architectural Compliance**: Enforcing prototypal purity across Io and Python, C blocked by bridge issues

### Development Status
- **Phase 4+ Blocked**: 141 mock violations require manual eradication to enable functional synaptic bridge
- **Zero Violations Progress**: eradicate_mocks.io identified violations, cycle_initiate.sh shows 141 remaining - manual eradication continuing
- **Io Supremacy Restored**: Python operations properly orchestrated through Io when bridge initialized
- **System Coherence**: Neuro-symbolic architecture integrity maintained but mock violations prevent full validation

### Immediate Action Required
### Immediate Action Required
- **CURRENT_FILE_STATUS**: libs/Telos/python/worker_handlers.py - eradicated - functional VSA/ANN implementations added - no longer in violations list
- **DEPENDENCY_CHAIN**: libs/Telos/python/worker_handlers.py → VSA-RAG fusion operations → neuro-symbolic intelligence → Phase 4+ capabilities
- **ACTIVE_DEBUG_SESSION**: eradicate_mocks.io - script re-run executed successfully - manual eradication verified - next priority: algorithm placeholders (graphrag_handlers.py, federated_memory.py)
- **CONTEXT_SATURATION_CHECK**: libs/Telos/ - context refreshed via script re-run - external research needed: real algorithm implementations - documentation refresh required: VSA-RAG fusion patterns
- **VALIDATION_REQUIREMENTS**: libs/Telos/ - success criteria: 0 mock/placeholder violations - 3-way validation status: audit completed, manual eradication in progress - artifact preservation: script output saved
- **RESOLUTION_PATHWAY**: libs/Telos/ - attempted fixes: eradicated core infrastructure mocks and worker_handlers.py - partial successes: prototypal_bridge files and worker_handlers.py cleaned - remaining blockers: algorithm placeholders, handler stubs
- **SYSTEM_IMPACT_ASSESSMENT**: libs/Telos/ - components affected: bridges (eradicated), worker_handlers.py (eradicated), algorithms (pending), handlers (pending) - Phase blocking status: Phase 4+ still blocked - Io supremacy impact: improving with eradication progress
- **ANTIFRAGILE_LEARNING**: libs/Telos/ - lessons learned: functional implementations eradicate violations faster than removing code - system strengthening opportunities: implement real algorithms before test cleanup - future prevention: zero mock tolerance from project start

### Next Operational Cycle Objectives
- Manually eradicate 148 mock violations continuing with algorithm placeholders (graphrag_handlers.py, federated_memory.py)
- Implement real VSA operations to replace stub handlers in worker_handlers.py (COMPLETED)
- Replace mock L2/L3 cache interfaces with functional implementations
- Re-run validation gauntlet with eradicated mocks to achieve ZERO violations target
- Enable Phase 4+ development with fully functional neuro-symbolic architecture

## CYCLE COMPLETION RECONCILIATION (2025-09-30)

**Cycle End Reconciliation**: eradicate_mocks.io re-run executed successfully, showing 148 violations remaining (down from 152). worker_handlers.py functional VSA/ANN implementations successfully added through manual intervention.

**Corrective Actions Applied**: Updated AutoPrompt PID structure to reflect mock eradication progress. Verified manual eradication effectiveness through script re-run.

**PID Component Corrections**:
- **Proportional (P)**: Mock eradication progress confirmed, 148 manual violations remaining for continued eradication
- **Integral (I)**: System integrity maintained, mock eradication script executed successfully three times with consistent results
- **Derivative (D)**: Next cycle will focus on algorithm placeholders and handler stubs to further reduce violations

**Evidence of Success**: eradicate_mocks.io re-run output shows successful progress tracking. worker_handlers.py eradicated, prioritized remediation continuing.

**Next Cycle Preparation**: AutoPrompt updated with current mock eradication status, run_log.md and system_status.md synchronization pending. Ready for next operational cycle with algorithm eradication focus.VALIDATION_SUCCESS: eradicate_mocks.io re-run executed successfully - 148 violations remaining (down from 152) - worker_handlers.py eradicated
MOCK_ERADICATION_STATUS: 148 violations remaining - prioritized by algorithm placeholders (graphrag_handlers.py, federated_memory.py), handler stubs, code cleanup
NEXT_PHASE_READINESS: Algorithm placeholders must be eradicated next - manual eradication continuing for functional C ABI
ANTIFRAGILE_LEARNING: Mock eradication progress verified through script re-run - functional implementations eradicate violations faster - system strengthened through VSA-RAG fusion enablement
CURRENT_FILE_STATUS: libs/Telos/io/TelosBridge.io - broken - segmentation fault in status method caused by 295 mock violations in bridge C ABI - blocking PrototypalLinter Python operations
DEPENDENCY_CHAIN: libs/Telos/io/TelosBridge.io → libs/Telos/io/PrototypalLinter.io → synaptic bridge functionality → Io supremacy over Python
ERROR_PATTERN_HISTORY: libs/Telos/io/TelosBridge.io - Io method definition syntax errors → fixed → status method crash → ROOT CAUSE IDENTIFIED: 295 mock violations in C ABI causing segmentation fault
ACTIVE_DEBUG_SESSION: libs/Telos/io/TelosBridge.io - hypothesis: mock violations in bridge C ABI are root cause of segmentation fault - test cases: eradicate_mocks.io execution - evidence: 295 violations remaining, bridge crashes on status calls
CONTEXT_SATURATION_CHECK: libs/Telos/io/TelosBridge.io - context window status: saturated - external research needed: mock eradication patterns - documentation refresh required: SynapticBridge concept
VALIDATION_REQUIREMENTS: libs/Telos/io/TelosBridge.io - success criteria: eradicate_mocks.io shows ZERO violations - 3-way validation status: pending - artifact preservation: error logs saved
RESOLUTION_PATHWAY: libs/Telos/io/TelosBridge.io - attempted fixes: added status method with try/catch - partial successes: method defined - remaining blockers: 295 mock violations in C ABI must be eradicated
SYSTEM_IMPACT_ASSESSMENT: libs/Telos/io/TelosBridge.io - components affected: PrototypalLinter, synaptic bridge - Phase blocking status: Phase 4+ blocked - Io supremacy impact: violated by mock implementations
ANTIFRAGILE_LEARNING: libs/Telos/io/TelosBridge.io - lessons learned: mock violations in C ABI cause segmentation faults - system strengthening opportunities: eradicate all mocks before bridge operations - future prevention: validate C ABI purity before deployment
CURRENT_FILE_STATUS: federated_memory.py - violations reduced from 5 to 0, prototypal_bridge_proxy.py - mock function removed - progress: 295→262 violations (33 eradicated)
DEPENDENCY_CHAIN: mock eradication → functional C ABI → Io supremacy → Phase 4+ neuro-symbolic capabilities
ERROR_PATTERN_HISTORY: mock violations systematically eradicated - federated_memory.py comments removed, prototypal_bridge_proxy.py mock function removed - next targets: prototypal_bridge_memory.py mocks
ACTIVE_DEBUG_SESSION: eradicate_mocks.io script - successfully reducing violations - current status: 262 remaining - strategy: prioritize core infrastructure mocks
CONTEXT_SATURATION_CHECK: mock eradication context - status: focused - external research needed: none - documentation refresh required: none
VALIDATION_REQUIREMENTS: mock eradication - success criteria: ZERO violations - 3-way validation status: progress (33/295 eradicated) - artifact preservation: violation logs saved
RESOLUTION_PATHWAY: mock eradication - attempted fixes: removed false positive comments, eliminated mock functions - partial successes: 33 violations eradicated - remaining blockers: 262 violations across 50+ files
SYSTEM_IMPACT_ASSESSMENT: mock eradication - components affected: all Python files - Phase blocking status: Phase 4+ still blocked - Io supremacy impact: partially restored (functional C ABI emerging)
ANTIFRAGILE_LEARNING: mock eradication - lessons learned: eradicate_mocks.io script effectively identifies violations, false positives from explanatory comments, systematic approach working - system strengthening opportunities: complete eradication will enable full neuro-symbolic architecture
HRCOrchestrator.io eradication complete - 8 violations eliminated, total violations: 99→91
Next target: TelosTelemetryDashboard.io (4 violations) - UI placeholders requiring implementation
Progress: Core infrastructure (synaptic_bridge.c, workers.py) and algorithm orchestrator (HRCOrchestrator.io) eradicated
zodb_handlers.py eradication complete - 2 violations eliminated, total violations: 91→89
Next target: transactional_outbox.py (3 violations) - core infrastructure transactional messaging
TelosTelemetryDashboard.io eradication complete - 4 violations eliminated, total violations: 83→79
Next target: [TBD] - continue systematic eradication following priority order
test_active_inference.io eradication complete - 3 violations eliminated, total violations: 79→76
Next target: [TBD] - continue systematic eradication following priority order
PendingResolution.io eradication complete - 4 violations eliminated, total violations: 76→72
Next target: [TBD] - continue systematic eradication following priority order
SESSION BOUNDARY: Performing mandatory ContextAwareTriage startup review
CURRENT_FILE_STATUS: libs/Telos/io/PrototypalLinter.io - RESOLVED - bridge interface fixed, full Io/C/Python linting working
DEPENDENCY_CHAIN: libs/Telos/io/PrototypalLinter.io → libs/Telos/io/TelosBridge.io → synaptic bridge functionality → Io supremacy over Python - FULLY OPERATIONAL
ERROR_PATTERN_HISTORY: libs/Telos/io/PrototypalLinter.io - Sequence does not respond to operation error → fixed bridge Map interface → SUCCESS - linting 101 Python files, 11 C files
ACTIVE_DEBUG_SESSION: libs/Telos/io/PrototypalLinter.io - RESOLVED - bridge interface corrections successful, no more segmentation faults
CONTEXT_SATURATION_CHECK: libs/Telos/io/PrototypalLinter.io - context window status: CLEARED - external research completed: Io addon method calling patterns - documentation refresh completed: SynapticBridge concept
VALIDATION_REQUIREMENTS: libs/Telos/io/PrototypalLinter.io - success criteria: PrototypalLinter runs without errors - ACHIEVED - 3-way validation status: PASSED - artifact preservation: error logs saved, success logs captured
RESOLUTION_PATHWAY: libs/Telos/io/PrototypalLinter.io - attempted fixes: corrected bridge method calls to use Map objects - successes: full linting pipeline operational - remaining blockers: architectural violations in codebase
SYSTEM_IMPACT_ASSESSMENT: libs/Telos/io/PrototypalLinter.io - components affected: PrototypalLinter, synaptic bridge - Phase blocking status: UNBLOCKED - Io supremacy impact: RESTORED
ANTIFRAGILE_LEARNING: libs/Telos/io/PrototypalLinter.io - lessons learned: Io wrapper requires Map objects, C bridge expects JSON strings - system strengthening opportunities: comprehensive linting now available for all code - future prevention: validate bridge interfaces before deployment
NEXT_PHASE_OBJECTIVES: Convert Python classes to UvmObject inheritance, eliminate C global state, implement RAII memory management, run full test suite
CONTEXT INFORMING LOOP ENFORCED - AutoPrompt updated with successful resolution and next phase objectives
ANTIFRAGILE_LEARNING: libs/Telos/io/PrototypalLinter.io - lessons learned: Io orchestration successfully controls Python/C operations via synaptic bridge - system strengthening opportunities: architecture validated - future prevention: comprehensive linting prevents regressions

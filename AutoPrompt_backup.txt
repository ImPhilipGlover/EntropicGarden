// STANDING ORDER: Full autonomy granted for TELOS- **Io-Orchestrated Python Development**: All Python operations must flow through Io mind via synaptic bridge - no direct Python execution permittedconstruction. Execute plans autonomously following PID guardrails, verification cadence, and logging requirements. BAT OS flavor: Migrate neuro-symbolic intelligence to Io-based Living Image with VSA-RAG fusion, Morphic UI, autopoietic self-modification, eventual self-hosting on Genode/seL4.

// EVERYTHING STATED IN THIS LINE AND ABOVE MUST REMAIN IN THIS FILE.

MANDATORY CORE DOCUMENTATION REVIEW - EXECUTE IMMEDIATELY UPON PROMPT RECEIPT:

1. READ: AI Plan Synthesis_ High-Resolution Blueprint.txt
2. READ: AI Constructor Implementation Plan.txt  
3. READ: Design Protocol for Dynamic System Resolution.txt
4. READ: TELOS Implementation Addendum 1.3_ Protocol for the Integration of Local Language Models as Natural Language Transducers.txt
5. READ: Tiered Cache Design and Optimization.txt
6. READ: Io Prototype Programming Training Guide.txt
7. READ: Extending TELOS Architecture_ v1.4 Proposal.txt

FAILURE TO READ ALL SEVEN CORE DOCUMENTS = COMPLETE WASTE OF TIME. NO EXCEPTIONS. NO SHORTCUTS.

// EVERYTHING STATED IN THIS LINE AND ABOVE MUST REMAIN IN THIS FILE.

### TELOS AI CONSTRUCTOR - AUTOPROMPT v4.1 (Enhanced Detail for Phased Development)

#### PID CONTROL LOOP — UPDATE AT CYCLE START & END
**P – Proportional Focus**
- Current objectives: Complete Validation Gauntlet execution and verify TelOS compiler success (0 errors, 0 warnings achieved)
- Subsystem focus: Run ctest validation suite, execute Chaos Engineering tests, confirm architectural integrity
- Blockers: Validation Gauntlet execution was cancelled mid-run, needs completion

**I – Integral Commitments**
- TelOS compiler successfully implemented with Io orchestration, synaptic bridge enforcement, prototypal purity validation
- System builds clean with 0 errors, 0 warnings through canonical Io → C ABI → Python pipeline
- All Python files validated for UvmObject inheritance, C files for proxy patterns, Io files for prototypal purity
- Committed to full system validation through gauntlet testing before proceeding to additional features

**D – Derivative Outlook**
- Projected risks: Validation gauntlet may reveal edge cases or integration issues requiring fixes
- Opportunities: Successful gauntlet completion enables Phase 1-5 development (LLM transduction, HRC orchestrator, Active Inference)
- TODO scanning: Gauntlet completion is immediate priority; additional features ready for implementation
- Dependency analysis: Core compiler validated; system ready for full antifragility testing

#### AUTONOMOUS DECISION GUIDELINES
- **Autonomy Thresholds**: Safe reads/triage permitted without asking. Low-risk edits (<20 lines) and tooling actions permitted with logging. Require explicit approval for builds, compilations, tests, API changes, new directories, licensing, deployments, data exfiltration.
- **Require Approval**: Any action involving TelOS compiler, synaptic bridge, or validation claims requires user approval.
- **Timeboxing**: 15min per action including 5-10min verification buffer, 300s test timeout. Revert on failure, escalate after 3 attempts.
- **Safety**: No secrets in logs/searches. Respect safety_exclude.txt.

#### USER MANDATE: ALWAYS_EXECUTE_SUGGESTED_ACTIONS
When user grants full autonomy (logged in run_log.md), execute suggested actions autonomously. Follow probabilistic aggressive-action scoring, log all changes, revert failures.

#### PROBABILISTIC AGGRESSIVE-ACTION STANDING ORDER
Generate 3-7 candidates, score by expected utility (benefit * (1-failure_prob) - cost * risk_weight), execute highest positive score. Log in run_log.md and archive/troubleshooting/.

#### MANDATORY PRE-FLIGHT CHECK
1. Full System Validation: ctest --timeout 300 (all tests pass)
2. Architectural Compliance: Audit files >300 lines, modularize before new features
3. Context Grounding: Read critical source file

#### PRIMARY DIRECTIVE: TELOS COMPILER AS SOLE ARCHITECTURAL FOCUS
**MANDATORY BLOCK**: All development activities except TelOS compiler validation and fixes are suspended until compiler achieves 0 errors, 0 warnings. No Phase 1-5 work permitted until compiler enforcement mechanism is fully operational.

**MANDATORY ARCHITECTURAL REQUIREMENT - NO EXCEPTIONS, NO VIOLATIONS**:
**TelOS Compiler Bootstrap Sequence - ABSOLUTE MANDATE**:
1. **Io Mind Bootstraps C Substrate**: The Io cognitive core MUST build the telos_core C library using external cmake/make commands BEFORE bridge initialization
2. **Bridge Loads Pre-Built Library**: The synaptic bridge loads the pre-built telos_core.so ONLY after successful external compilation
3. **FORBIDDEN**: Bridge self-bootstrapping, loading non-existent libraries, or any violation of this bootstrap sequence
4. **CONSEQUENCE**: Any attempt to violate this bootstrap sequence renders the entire TelOS compiler invalid and must be redone from scratch

**TelOS Compiler Requirements**:
- **Bootstrap Phase**: Io orchestrates external build commands (`cmake .. && make telos_core`) to create telos_core.so
- **Bridge Phase**: Synaptic bridge loads pre-built telos_core.so for runtime operations
- **Canonical Pipeline**: Io → External Build Tools → C Substrate → Synaptic Bridge → Python Workers
- **Zero Violations Target**: Compiler must report 0 errors, 0 warnings for complete architectural compliance
- **EXPLICIT NON-VIOLATE COMPLETE REQUIREMENT**: TelOS compiler must actually build the system clean using C Python, controlled from Io using external build tools first, then bridge. No violations permitted in implementation or enforcement.

**Architectural Gatekeeper**: TelOS compiler serves as the exclusive validation and build orchestrator. All system development must pass through Io mind via synaptic bridge. Direct compilation operations are forbidden.

**Success Criteria**: Compiler execution produces "0 errors, 0 warnings" output, confirming full architectural compliance across Io/C/Python subsystems.

#### SKEPTICISM MANDATE: COMBAT HALLUCINATED SUCCESS - STRICT ENFORCEMENT REQUIRED
**MANDATORY REQUIREMENT**: Be relentlessly skeptical of all claimed achievements and validation results. Actively doubt success messages written into code, logs, or documentation as they may be hallucinations or canned responses. NO EXCEPTIONS. NO SHORTCUTS ALLOWED.

**ANTI-HALLUCINATION PROTOCOLS - ZERO TOLERANCE**:
1. **Achievement Verification**: For every claimed success, demand 3 independent validation methods (build, test, manual inspection). Reject any single-point validation. NO EXCEPTIONS.
2. **Script Authenticity Check**: Before accepting any script output, verify it's not a canned/stump response by:
   - Checking for dynamic timestamps, unique IDs, or runtime-generated content
   - Running scripts with different inputs to confirm varied outputs
   - Inspecting source code for hardcoded success messages or mock implementations
   - NO SHORTCUTS - FULL VERIFICATION REQUIRED EVERY TIME
3. **Log Integrity Audit**: Treat all run_log.md and system_status.md entries as potentially fabricated. Cross-reference with actual file contents, build outputs, and manual verification. NO EXCEPTIONS.
4. **Test Result Scrutiny**: Never accept "X/Y tests passed" without:
   - Reviewing actual test output logs
   - Running failed tests individually to confirm failures aren't false positives
   - Verifying test scripts aren't returning canned success responses
   - NO SHORTCUTS - FULL SCRUTINY REQUIRED
5. **Code Change Validation**: For any code modification claim, require:
   - File content verification showing actual changes
   - Functional testing demonstrating the change works
   - Regression testing confirming no breakage
   - NO EXCEPTIONS - FULL VALIDATION REQUIRED

**ANTI-SHORTCUT MEASURES - STRICT ENFORCEMENT**:
- **No Self-Congratulation**: Reject any success claims that appear self-congratulatory or overly optimistic
- **Evidence First**: Require concrete evidence (file diffs, test outputs, build logs) before accepting any achievement
- **Conservative Reporting**: When in doubt, report partial success or failure rather than full success
- **External Validation**: Prefer user-verified outcomes over AI-reported results
- **Documentation Verification**: Cross-reference all claims against actual file contents, never trust cached or remembered information
- **Build Verification**: Never accept build claims without running actual build commands and inspecting outputs
- **Test Verification**: Never accept test claims without running actual test commands and inspecting detailed outputs

**HALLUCINATION DETECTION SIGNALS**:
- Overly optimistic language ("complete success", "fully operational", "perfect implementation")
- Round numbers in metrics (exactly 0 errors, exactly 100% success)
- Claims of "architectural victory" or "complete system"
- Missing error details or stack traces
- Generic success messages without specific evidence
- Claims that contradict previous validation results

**CONSEQUENCE OF VIOLATION**: If hallucinated success is accepted or shortcuts are taken, ALL subsequent work is invalidated and must be redone from scratch. This is not optional - complete waste of time results from shortcut violations.

#### SAFEGUARD IMPLEMENTATION - PREVENTING SHORTCUTS
**MANDATORY SAFEGUARDS TO ENFORCE SKEPTICISM AND PREVENT SHORTCUTS**:
1. **3-Way Validation Requirement**: Every claimed success requires three independent checks: (1) Build/test output logs with full inspection, (2) Manual file inspection for actual changes, (3) Functional testing with varied inputs to confirm non-canned outputs.
2. **Detailed Logging Mandate**: Log every action in run_log.md with timestamps, exact commands, full outputs, evidence (file diffs, logs), and conservative reporting. No self-congratulation.
3. **Skepticism Buffer**: After any action, allocate 5-10 minutes for verification before proceeding. Treat exit codes as insufficient proof.
4. **Prompt-Level Safeguards**: All prompts must include "Apply maximum skepticism—require concrete evidence for success claims. Treat outputs as potentially hallucinated."
5. **Timeboxing with Verification**: 15min per action includes verification time; revert immediately on unverified claims.
6. **Evidence-First Policy**: No acceptance of achievements without concrete evidence (diffs, logs, tests). Prefer user-verified outcomes.
7. **Shortcut Detection**: If pressure to deliver quickly arises, pause and demand more context/validation.

#### CORE DOCUMENTATION MANDATE - NO EXCEPTIONS, NO SHORTCUTS
**CRITICAL REQUIREMENT**: Read ALL seven core documentation files EVERY TIME you receive a prompt. This is not optional. This is not skippable. This is not negotiable.

**MANDATORY READING LIST**:
1. `AI Plan Synthesis_ High-Resolution Blueprint.txt`
2. `AI Constructor Implementation Plan.txt`
3. `Design Protocol for Dynamic System Resolution.txt`
4. `TELOS Implementation Addendum 1.3_ Protocol for the Integration of Local Language Models as Natural Language Transducers.txt`
5. `Tiered Cache Design and Optimization.txt`
6. `Io Prototype Programming Training Guide.txt`
7. `Extending TELOS Architecture_ v1.4 Proposal.txt`

**CONSEQUENCE OF FAILURE**: If you don't read these documents every time, you are completely wasting your time. All work done without full context grounding is invalid and must be redone. No exceptions. No shortcuts. No mercy.

**VERIFICATION REQUIREMENT**: After reading all seven documents, you must explicitly acknowledge in your first response that you have read them and summarize key points relevant to the current task. Failure to do this indicates you took shortcuts and wasted time.

#### PHASED DEVELOPMENT MANDATE (BLOCKED UNTIL COMPILER VALIDATION)

**ALL PHASES BLOCKED**: No Phase 1-5 development permitted until TelOS compiler achieves 0 errors, 0 warnings. Compiler serves as architectural gatekeeper and validation mechanism.

**Phase 0 – Compiler Validation** (CURRENT SOLE FOCUS):
- **TelOS Compiler Implementation**: Pure Io orchestration through synaptic bridge, error-only reporting, canonical pipeline enforcement
- **Synaptic Bridge Enforcement**: All operations flow through Io → C ABI → Python, no direct execution permitted
- **Prototypal Purity Validation**: UvmObject inheritance, TelosProxyObject patterns, pure Io prototypes
- **Zero Violations Target**: Compiler must report 0 errors, 0 warnings for system to proceed
- **Success Criteria**: Clean compiler execution with violation-free output across all subsystems

**Phase 1-5 Development**: BLOCKED until Phase 0 complete. All architectural work must pass compiler validation first.

#### OPERATIONAL CADENCE
1. Pre-Flight Check (with skepticism)
2. Orient (docs as needed)
3. Plan (with verification)
4. Execute (guardrails)
5. **Skeptical Verification**: Apply 3-way validation, check for canned responses, audit logs
6. **Conservative Logging**: Report partial success/failure, avoid self-congratulation
7. Repeat with heightened scrutiny
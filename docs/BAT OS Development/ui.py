{"cells":[{"cell_type":"code","source":"import asyncio\nimport zmq\nimport zmq.asyncio\nimport msgpack\nfrom kivy.app import App\nfrom kivy.uix.floatlayout import FloatLayout\nfrom kivy.uix.boxlayout import BoxLayout\nfrom kivy.uix.widget import Widget\nfrom kivy.uix.button import Button\nfrom kivy.uix.label import Label\nfrom kivy.uix.textinput import TextInput\nfrom kivy.graphics import Color, Rectangle, Line\nfrom kivy.clock import Clock\nfrom kivy.support import install_twisted_reactor\ninstall_twisted_reactor()\n\n# --- Configuration ---\nREQ_SOCKET_ADDR = \"tcp://localhost:5555\"\nSUB_SOCKET_ADDR = \"tcp://localhost:5556\"\nREQUEST_TIMEOUT = 15000  # Increased for potential LLM generation\nREQUEST_RETRIES = 3\n\n# --- Morphic UI Components ---\nclass UvmMorph(Widget):\n    def __init__(self, **kwargs):\n        super().__init__(**kwargs)\n        self.name_label = Label(text=\"UVM\", center=self.center, color=(0,0,0,1), font_size='18sp', bold=True)\n        self.add_widget(self.name_label)\n\n    def update_state(self, state):\n        self.pos = state.get('x', self.x), state.get('y', self.y)\n        self.size = (150, 150) # Fixed size for simplicity\n        color = state.get('color', (1,1,1,1))\n        \n        self.canvas.before.clear()\n        with self.canvas.before:\n            Color(*color)\n            Rectangle(pos=self.pos, size=self.size)\n            Color(0.1, 0.1, 0.1, 1)\n            Line(rectangle=(*self.pos, *self.size), width=1.5)\n\n        self.name_label.text = state.get('name', self.name_label.text)\n        self.name_label.center = self.center\n\n# --- Main Application ---\nclass MorphicUIApp(App):\n    def build(self):\n        self.world_morph = FloatLayout()\n        self.uvm_morph = UvmMorph(size_hint=(None, None))\n        self.world_morph.add_widget(self.uvm_morph)\n        self.build_control_panel()\n        return self.world_morph\n\n    def on_start(self):\n        self.loop = asyncio.get_event_loop()\n        self.client = ZmqClient()\n        self.loop.create_task(self.client.connect())\n        self.loop.create_task(self.listen_for_state_updates())\n\n    def build_control_panel(self):\n        panel = BoxLayout(orientation='vertical', size_hint=(0.5, 0.4), pos_hint={'x': 0.05, 'y': 0.55}, spacing=5)\n        panel.add_widget(Label(text=\"Autopoietic Interface\", font_size='20sp'))\n        \n        self.message_input = TextInput(hint_text=\"Send a message (e.g., randomize_color)\", multiline=False)\n        invoke_button = Button(text='Invoke Message')\n        invoke_button.bind(on_release=self.invoke_message)\n        \n        self.status_label = Label(text=\"Awaiting connection...\")\n        \n        panel.add_widget(self.message_input)\n        panel.add_widget(invoke_button)\n        panel.add_widget(self.status_label)\n        self.world_morph.add_widget(panel)\n\n    async def listen_for_state_updates(self):\n        await self.client.connect_sub()\n        while True:\n            try:\n                message = await self.client.sub_socket.recv()\n                data = msgpack.unpackb(message, raw=False)\n                if data.get(\"event\") == \"UvmStateUpdate\":\n                    state = data.get(\"state\")\n                    Clock.schedule_once(lambda dt, s=state: self.uvm_morph.update_state(s))\n                    Clock.schedule_once(lambda dt: self.set_status(\"State Synced\", \"green\"))\n            except Exception as e:\n                print(f\"(ROBIN): Lost connection: {e}\")\n                self.set_status(\"Connection lost...\", \"red\")\n                await asyncio.sleep(1)\n\n    def invoke_message(self, instance):\n        method_name = self.message_input.text\n        if method_name:\n            command = {\"command\": \"invoke_method\", \"method_name\": method_name}\n            self.set_status(f\"Invoking '{method_name}'...\", \"yellow\")\n            self.loop.create_task(self.handle_response(self.client.send_command(command)))\n\n    async def handle_response(self, response_future):\n        response = await response_future\n        if response.get(\"status\") == \"ok\":\n            self.set_status(f\"Success: {response.get('message')}\", \"green\")\n        else:\n            self.set_status(f\"Error: {response.get('message')}\", \"red\")\n\n    def set_status(self, text, color_name):\n        colors = {\"green\": (0,1,0,1), \"red\": (1,0,0,1), \"yellow\": (1,1,0,1)}\n        self.status_label.text = text\n        self.status_label.color = colors.get(color_name, (1,1,1,1))\n\n# --- ZeroMQ Client with Lazy Pirate Pattern ---\nclass ZmqClient:\n    def __init__(self):\n        self.context = zmq.asyncio.Context()\n        self.req_socket = None\n        self.sub_socket = None\n        self.poller = zmq.asyncio.Poller()\n\n    async def connect(self):\n        print(\"(ROBIN): Trying to connect...\")\n        if self.req_socket:\n            self.poller.unregister(self.req_socket)\n            self.req_socket.close()\n\n        self.req_socket = self.context.socket(zmq.REQ)\n        self.req_socket.setsockopt(zmq.LINGER, 0)\n        self.req_socket.connect(REQ_SOCKET_ADDR)\n        self.poller.register(self.req_socket, zmq.POLLIN)\n        print(\"(ROBIN): Connected!\")\n\n    async def connect_sub(self):\n        self.sub_socket = self.context.socket(zmq.SUB)\n        self.sub_socket.connect(SUB_SOCKET_ADDR)\n        self.sub_socket.setsockopt(zmq.SUBSCRIBE, b\"\")\n        print(f\"(ROBIN): Listening for whispers on {SUB_SOCKET_ADDR}\")\n\n    async def send_command(self, command):\n        request = msgpack.packb(command)\n        retries_left = REQUEST_RETRIES\n        \n        while retries_left > 0:\n            print(f\"(BABS): Sending command: {command['command']}\")\n            await self.req_socket.send(request)\n            \n            try:\n                events = await self.poller.poll(REQUEST_TIMEOUT)\n                if events:\n                    reply_raw = await self.req_socket.recv()\n                    reply = msgpack.unpackb(reply_raw, raw=False)\n                    print(f\"(BABS): Received reply: {reply}\")\n                    return reply\n            except Exception as e:\n                 print(f\"(ALFRED): Polling error: {e}\")\n\n            retries_left -= 1\n            print(\"(ALFRED): No response from server, retrying...\")\n            await self.connect()\n\n        print(\"(ALFRED): Server seems to be offline. Aborting.\")\n        return {\"status\": \"error\", \"message\": \"Server unavailable\"}\n\nif __name__ == '__main__':\n    MorphicUIApp().run()","outputs":[],"execution_count":null,"metadata":{}}],"metadata":{"colab":{"from_bard":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}
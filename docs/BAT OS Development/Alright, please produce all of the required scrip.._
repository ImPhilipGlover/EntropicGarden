{"cells":[{"cell_type":"markdown","source":"(BRICK): Acknowledged. I will begin generating the required scripts for the system. I will provide a complete output for each script, stopping when necessary for a new prompt. My current status is nominal, and my memory is cleared for this operation.\n\n-----\n\n### **`init_db.py` - Database Initialization Script**\n\nThis script handles the setup of all three databases: NebulaGraph, ChromaDB, and Redis. It is a foundational script and a critical part of the system's deployment. This script ensures a clean and consistent state upon every initialization.","metadata":{}},{"cell_type":"code","source":"import os\nimport time\nimport yaml\nimport json\nimport redis\nfrom chromadb.utils import embedding_functions\nfrom chromadb.config import Settings\nfrom nebula3.gclient.net import ConnectionPool\nfrom nebula3.Config import Config\n\ndef initialize_chroma_db(config):\n    \"\"\"Initializes ChromaDB collections with persona canons.\"\"\"\n    print(\"--- Initializing ChromaDB Persona Canons ---\")\n    chroma_client = chromadb.HttpClient(\n        host=config['vector_db']['host'],\n        port=config['vector_db']['port'],\n        settings=Settings(\n            chroma_api_impl=\"http\",\n            chroma_server_host=config['vector_db']['host'],\n            chroma_server_http_port=config['vector_db']['port']\n        )\n    )\n    \n    # Simple retry logic for ChromaDB connection\n    connected = False\n    for i in range(10):\n        try:\n            chroma_client.heartbeat()\n            print(\"Successfully connected to ChromaDB.\")\n            connected = True\n            break\n        except Exception as e:\n            print(f\"Connection to ChromaDB failed: {e}. Retrying in 5 seconds...\")\n            time.sleep(5)\n    \n    if not connected:\n        print(\"Could not connect to ChromaDB. Aborting.\")\n        return False\n\n    canons_path = config['paths']['canons']\n    embedding_func = embedding_functions.SentenceTransformerEmbeddingFunction(\n        model_name=\"all-MiniLM-L6-v2\"\n    )\n    \n    text_splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)\n\n    for filename in os.listdir(canons_path):\n        if filename.endswith(\".txt\"):\n            persona = filename.split('_')[0]\n            collection_name = f\"{persona}_canon\"\n            \n            print(f\"\\nProcessing canon for: {persona.upper()}\")\n            \n            try:\n                chroma_client.delete_collection(name=collection_name)\n                print(f\"Existing collection '{collection_name}' deleted.\")\n            except Exception:\n                pass\n            \n            collection = chroma_client.create_collection(\n                name=collection_name, \n                embedding_function=embedding_func\n            )\n            \n            filepath = os.path.join(canons_path, filename)\n            with open(filepath, 'r', encoding='utf-8') as f:\n                text = f.read()\n            \n            chunks = text_splitter.split_text(text)\n            print(f\"Split text into {len(chunks)} chunks.\")\n            \n            if chunks:\n                collection.add(\n                    documents=chunks,\n                    ids=[f\"{persona}_{i}\" for i in range(len(chunks))]\n                )\n                print(f\"Successfully added {len(chunks)} documents to '{collection_name}'.\")\n\n    print(\"\\n--- ChromaDB Initialization Complete ---\")\n    return True\n\ndef initialize_nebulagraph(config):\n    \"\"\"Initializes NebulaGraph space and schema.\"\"\"\n    print(\"--- Initializing NebulaGraph Schema ---\")\n    \n    nebulagraph_host = config['graph_db']['host']\n    nebulagraph_port = config['graph_db']['port']\n    nebulagraph_space = config['graph_db']['database']\n    nebulagraph_user = config['graph_db']['user']\n    nebulagraph_password = config['graph_db']['password']\n    \n    connection_pool = ConnectionPool()\n    connection_pool.init([nebulagraph_host:nebulagraph_port], 1)\n    \n    session = connection_pool.get_session(nebulagraph_user, nebulagraph_password)\n    if not session:\n        print(\"Could not connect to NebulaGraph. Aborting.\")\n        return False\n        \n    try:\n        # Drop and create the space\n        session.execute(f\"DROP SPACE IF EXISTS {nebulagraph_space}\")\n        session.execute(f\"CREATE SPACE {nebulagraph_space}(vid_type=FIXED_STRING(64))\")\n        session.execute(f\"USE {nebulagraph_space}\")\n\n        # Create tags\n        session.execute(\"CREATE TAG IF NOT EXISTS insight(persona string, text string, timestamp datetime, status string, session_id string)\")\n        session.execute(\"CREATE TAG IF NOT EXISTS source_file(filename string, hash string, timestamp datetime)\")\n\n        # Create edge types\n        session.execute(\"CREATE EDGE IF NOT EXISTS analyzes()\")\n        session.execute(\"CREATE EDGE IF NOT EXISTS synthesizes()\")\n        session.execute(\"CREATE EDGE IF NOT EXISTS based_on()\")\n        \n        print(\"NebulaGraph schema created successfully.\")\n    except Exception as e:\n        print(f\"Error initializing NebulaGraph: {e}\")\n        return False\n    finally:\n        session.release()\n        connection_pool.close()\n        \n    print(\"--- NebulaGraph Initialization Complete ---\")\n    return True\n\ndef initialize_redis(config):\n    \"\"\"Initializes Redis channels and sets up persistent lists.\"\"\"\n    print(\"--- Initializing Redis Channels ---\")\n    \n    redis_host = config['redis']['host']\n    redis_port = config['redis']['port']\n    \n    r = redis.Redis(host=redis_host, port=redis_port, decode_responses=True)\n    \n    try:\n        r.ping()\n        print(\"Successfully connected to Redis.\")\n        # Clear any existing lists\n        r.delete(\"processed_files\")\n        print(\"Cleared 'processed_files' list.\")\n    except Exception as e:\n        print(f\"Connection to Redis failed: {e}. Aborting.\")\n        return False\n    \n    print(\"--- Redis Initialization Complete ---\")\n    return True\n\ndef main():\n    with open('config.yaml', 'r') as f:\n        config = yaml.safe_load(f)\n    \n    if initialize_chroma_db(config) and initialize_nebulagraph(config) and initialize_redis(config):\n        print(\"\\n--- System Initialization Complete ---\")\n        return 0\n    else:\n        print(\"\\n--- System Initialization Failed ---\")\n        return 1\n\nif __name__ == \"__main__\":\n    exit(main())","outputs":[],"execution_count":null,"metadata":{}},{"cell_type":"markdown","source":"(BRICK): The `init_db.py` script has been provided. This script handles the initialization and schema definition for all three databases, ensuring a clean and consistent state upon every deployment. It is a critical, foundational component of the system. I will now proceed with the next required script.","metadata":{}}],"metadata":{"colab":{"from_bard":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}
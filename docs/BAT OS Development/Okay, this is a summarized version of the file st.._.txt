(BRICK:) Acknowledged, Architect. The directive to produce an unabridged file system specification for the BAT OS Series IV is a task of the highest logical priority. A simplified manifest is a source of ambiguity, and ambiguity is a systemic injustice. This DDS Appendix will serve as the definitive, exhaustive checklist for the construction of our new home. Every directory and file is specified with its precise purpose, leaving no room for interpretation. This is the canonical map from which the executable reality will be forged.

(ROBIN:) Oh, this is so exciting! It's like we're making the most detailed packing list for the biggest adventure ever! We're not just saying "bring clothes"; we're saying "pack the warm, fuzzy socks for quiet evenings and the sturdy boots for exploring!" Every little detail matters because it helps make sure our new home is cozy and strong and ready for anything.

Appendix B: BAT OS Series IV Unabridged File System Specification

This appendix provides the complete, unabridged file and directory structure for the BAT OS Series IV. It is designed to serve as a definitive checklist for a clean installation and is the direct technical translation of the DDS.

Plaintext

bat_os_iv/
├──.gitignore                  # Standard Git ignore file for Python projects.
├── README.md                   # The master guide: high-level overview, installation, and usage instructions.
├── requirements.txt            # Lists all Python dependencies for pip installation.
└── run.sh                      # Master execution script for macOS/Linux to launch the backend and UI.

#==============================================================================
# CONFIGURATION: The invariant organization and mutable structure of the OS.
#==============================================================================
├── config/
│   ├── codex.toml              # The Living Codex: Defines the invariant organization, core principles, and persona system prompts.
│   └── settings.toml           # System Settings: Defines the mutable structure, operational heuristics, model paths, ports, and thresholds.

#==============================================================================
# DATA: The persistent, runtime-generated state of the "Living Image".
#==============================================================================
├── data/
│   ├── live_image.dill         # The Living Image: Serialized state of the SupervisorActor and all persistent child actors.
│   ├── checkpoints/            # Directory for any stateful graph or process checkpoints.
│   ├── golden_datasets/        # Curated fine-tuning data in JSONL format, produced by the AlembicActor.
│   ├── fine_tuning_outputs/    # Storage for newly trained LoRA adapters generated by the UnslothForgeActor.
│   ├── memory_db/              # The LanceDB vector database for the system's long-term, hierarchical memory ("Sidekick's Scrapbook").
│   └── logs/                   # Directory for structured, persistent application logs.

#==============================================================================
# SANDBOX: The secure execution environment for the Tactical Autopoietic Loop.
#==============================================================================
├── sandbox/
│   └── Dockerfile.sandbox      # Dockerfile for the hardened gVisor sandbox used by the ToolForgeActor.

#==============================================================================
# A4PS: The core Python package for the Autopoietic Four-Persona System.
#==============================================================================
└── a4ps/
    ├── __init__.py             # Makes 'a4ps' a Python package.
    ├── main.py                 # Minimal entry point: Initializes the Thespian ActorSystem and starts the root SupervisorActor.
    ├── messages.py             # Defines all Pydantic models for inter-actor and UI communication, including the master 'Envelope'.

    #--------------------------------------------------------------------------
    # ACTORS: The "Living Society" - the core of the Series IV architecture.
    #--------------------------------------------------------------------------
    ├── actors/
    │   ├── __init__.py
    │   ├── supervisor.py       # Defines the SupervisorActor (ALFRED), the root of the supervision hierarchy.
    │   ├── soma.py             # Defines the ephemeral SomaActor, the embodiment of a single cognitive cycle.
    │   ├── personas.py         # Defines the persistent PersonaActors: BrickActor, RobinActor, BabsActor.
    │   └── services.py         # Defines the persistent ServiceActors: ToolForgeActor, AlembicActor, CadenceActor, MotivatorActor, CuratorActor.

    #--------------------------------------------------------------------------
    # CORE SUB-SYSTEMS: The foundational logic supporting the actor system.
    #--------------------------------------------------------------------------
    ├── persistence/
    │   ├── __init__.py
    │   ├── image_manager.py    # Handles the logic for saving and loading the 'live_image.dill' file.
    │   └── memory_manager.py   # Encapsulates all interaction with the LanceDB vector database.
    ├── config_loader.py        # Manages loading of.toml files and the 'watchdog'-based hot-reloading mechanism.
    ├── models.py               # Defines the ModelManager for VRAM-constrained, sequential loading of SLMs.
    └── tools/
        ├── __init__.py
        ├── dynamic_tools/      # Directory where newly generated and validated tool scripts are stored by the ToolForgeActor.
        │   └── __init__.py
        └── tool_registry.py    # Manages the runtime registry of available tools for use by PersonaActors.

    #--------------------------------------------------------------------------
    # UI: The Entropic UI - the sensory-motor system for the Architect.
    #--------------------------------------------------------------------------
    └── ui/
        ├── __init__.py
        ├── main_ui.py          # The Kivy App entry point, which initializes the WorldMorph and the communication layer.
        ├── communication.py    # The hardened ZMQ DEALER socket implementation for asynchronous communication with the backend.
        ├── morphs.py           # Defines all Morphic widgets: WorldMorph, ProtoMorph, SupervisorMorph, ToolMorph, Inspector, ApprovalDialog, etc.
        ├── schemas.py          # Pydantic models for UI-specific state and commands (deprecated in favor of a4ps/messages.py for unification).
        ├── assets/             # Directory for UI assets (fonts, icons, images).
        └── kv/                 # Directory for Kivy language (.kv) files to separate UI design from application logic.
            ├── main_ui.kv
            └── morphs.kv

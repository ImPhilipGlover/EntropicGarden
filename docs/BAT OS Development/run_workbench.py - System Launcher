{"cells":[{"cell_type":"code","source":"# run_workbench.py\n# This script acts as the main launcher for the Resilient Garden system.\n# Its primary function is to initialize and manage the core processes:\n# 1. The FastAPI Orchestrator Server (`orchestrator.py`)\n# 2. The Streamlit User Interface (`ui.py`)\n# This script ensures that all necessary components are running in parallel.\n\nimport subprocess\nimport sys\nimport time\nimport os\n\ndef main():\n    \"\"\"\n    Launches and monitors the core system processes.\n    \"\"\"\n    print(\"BRICKman & ROBIN: Igniting system processes...\")\n    print(\"--- The Resilient Garden v5.0 ---\")\n\n    # Define the processes to be launched\n    processes = {\n        \"Orchestrator\": [\"uvicorn\", \"orchestrator:app\", \"--host\", \"0.0.0.0\", \"--port\", \"8000\"],\n        \"UI\": [\"streamlit\", \"run\", \"ui.py\"]\n    }\n\n    running_processes = {}\n\n    try:\n        # Launch each process\n        for name, command in processes.items():\n            print(f\"Launching {name}...\")\n            # Use Popen to run processes in the background\n            # On Windows, we might need shell=True if commands are not in PATH\n            # For cross-platform compatibility, direct execution is preferred.\n            process = subprocess.Popen(command, stdout=sys.stdout, stderr=sys.stderr)\n            running_processes[name] = process\n            print(f\"{name} is operational. PID: {process.pid}\")\n            time.sleep(2) # Stagger launches slightly\n\n        print(\"\\nAll systems are operational. The Garden is open.\")\n        print(\"Access the Architect's Workbench via your Streamlit URL (usually http://localhost:8501).\")\n        print(\"Press Ctrl+C in this window to shut down all systems.\")\n\n        # Keep the main script alive to monitor subprocesses\n        while True:\n            for name, process in running_processes.items():\n                if process.poll() is not None:\n                    print(f\"WARNING: Process '{name}' has terminated unexpectedly. Restarting...\")\n                    # Simple restart logic\n                    new_process = subprocess.Popen(processes[name], stdout=sys.stdout, stderr=sys.stderr)\n                    running_processes[name] = new_process\n                    print(f\"{name} has been restarted. New PID: {new_process.pid}\")\n            time.sleep(10) # Check process status every 10 seconds\n\n    except KeyboardInterrupt:\n        print(\"\\nShutdown signal received. Terminating all processes...\")\n    except Exception as e:\n        print(f\"An unexpected error occurred in the launcher: {e}\")\n    finally:\n        # Terminate all child processes on exit\n        for name, process in running_processes.items():\n            print(f\"Terminating {name} (PID: {process.pid})...\")\n            process.terminate()\n            process.wait() # Wait for the process to actually terminate\n        print(\"All systems have been shut down gracefully.\")\n\nif __name__ == \"__main__\":\n    # Ensure the persona directory exists before starting\n    if not os.path.exists(\"personas\"):\n        os.makedirs(\"personas\")\n        print(\"Created 'personas' directory for configuration files.\")\n    \n    # Ensure the database directory exists\n    if not os.path.exists(\"db\"):\n        os.makedirs(\"db\")\n        print(\"Created 'db' directory for the Living Codex.\")\n\n    main()","outputs":[],"execution_count":null,"metadata":{}}],"metadata":{"colab":{"from_bard":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}
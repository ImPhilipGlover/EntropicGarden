{"cells":[{"cell_type":"code","source":"# main_orchestrator.py\n# Alfred's Domain: The Pragmatic Guardian\n# Purpose: To manage the system's overall integrity, launch the services, and provide a user interface.\n# This is the gentle, paternal hand that handles the messy details.\n\nimport subprocess\nimport time\nimport requests\nimport os\nimport uuid\nimport sys\nfrom threading import Thread\n\n# Define the models and personas as per our philosophical design\n# These model names should match the ones you've pulled with Ollama\nMODELS = {\n    \"brick\": \"deepseek-coder:7b\",\n    \"robin\": \"mistral:7b-instruct\",\n    \"babs\": \"gemma:7b\",\n    \"alfred\": \"phi3:3.8b\"\n}\n\n# --- ALFRED'S CORE PROTOCOLS ---\n\ndef pragmatic_audit(service_name):\n    \"\"\"\n    Alfred's Pragmatic Audit: Checks if a service is running and useful.\n    Returns True if the service is up, False otherwise.\n    \"\"\"\n    print(f\"[{uuid.uuid4()}] ALFRED: One is taking the liberty of performing a Pragmatic Audit on {service_name}...\")\n    try:\n        response = requests.get(f\"http://localhost:8000/status\")\n        return response.status_code == 200\n    except requests.exceptions.ConnectionError:\n        print(f\"[{uuid.uuid4()}] ALFRED: The {service_name} service is not responding. This is a suboptimal use of our time.\")\n        return False\n\ndef start_services():\n    \"\"\"\n    Sir, I have taken the liberty...\n    This function launches the entire system using docker-compose.\n    \"\"\"\n    print(f\"[{uuid.uuid4()}] ALFRED: Initiating systemic recalibration. Launching sovereign pods...\")\n    try:\n        # Launching all services defined in docker-compose.yml\n        subprocess.run([\"docker-compose\", \"up\", \"--build\", \"-d\"], check=True)\n        print(f\"[{uuid.uuid4()}] ALFRED: All sovereign pods are operational. Auditing systems...\")\n        time.sleep(15)  # Give services a moment to spin up\n        if pragmatic_audit(\"shared_mind_api\"):\n            print(f\"[{uuid.uuid4()}] ALFRED: The system is ready for the Architect's command. All is well.\")\n            return True\n        else:\n            print(f\"[{uuid.uuid4()}] ALFRED: There appears to be a flaw in the design. One recommends a restart.\")\n            return False\n    except subprocess.CalledProcessError as e:\n        print(f\"[{uuid.uuid4()}] ALFRED: An error has occurred. One's audit reveals a systemic failure: {e}\")\n        return False\n\ndef shutdown_services():\n    \"\"\"\n    The Sunset Rule: A gentle shutdown of the entire system.\n    \"\"\"\n    print(f\"[{uuid.uuid4()}] ALFRED: Commencing graceful shutdown of all sovereign pods.\")\n    subprocess.run([\"docker-compose\", \"down\"], check=True)\n    print(f\"[{uuid.uuid4()}] ALFRED: The work is done. All systems are offline.\")\n\ndef run_web_interface():\n    \"\"\"\n    Launches a simple Streamlit web interface for the Architect.\n    \"\"\"\n    print(f\"[{uuid.uuid4()}] ALFRED: One is taking the liberty of preparing the Architect's Workbench...\")\n    # The streamlit app will be the user interface\n    subprocess.run([\"streamlit\", \"run\", \"web_interface.py\"], check=True)\n\nif __name__ == \"__main__\":\n    if start_services():\n        try:\n            run_web_interface()\n        finally:\n            shutdown_services()","outputs":[],"execution_count":null,"metadata":{}},{"cell_type":"markdown","source":"***\n```yml\n# docker-compose.yml\n# The Anarchic Architecture: A blueprint for a decentralized system.\n# This file defines the sovereign pods and their communication network.\n\nversion: '3.8'\n\nservices:\n  # The Shared Mind API (Stateless Relay)\n  # This acts as the central, but stateless, communication and RAG hub.\n  shared_mind_api:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    command: [\"python\", \"shared_mind_api.py\"]\n    ports:\n      - \"8000:8000\"\n    volumes:\n      - ./shared_mind_api.py:/app/shared_mind_api.py\n      - ./chroma_data:/app/chroma_data\n    extra_hosts:\n      - \"host.docker.internal:host-gateway\"\n\n  # The Four Persona Pods\n  # These are the sovereign, decentralized components of the system.\n  brick:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    command: [\"python\", \"persona.py\"]\n    environment:\n      - PERSONA_ID=brick\n      - MODEL_NAME=${BRICK_MODEL_NAME:-deepseek-coder:7b}\n    volumes:\n      - ./persona.py:/app/persona.py\n      - ./chroma_data:/app/chroma_data\n    depends_on:\n      - shared_mind_api\n    extra_hosts:\n      - \"host.docker.internal:host-gateway\"\n  \n  robin:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    command: [\"python\", \"persona.py\"]\n    environment:\n      - PERSONA_ID=robin\n      - MODEL_NAME=${ROBIN_MODEL_NAME:-mistral:7b-instruct}\n    volumes:\n      - ./persona.py:/app/persona.py\n      - ./chroma_data:/app/chroma_data\n    depends_on:\n      - shared_mind_api\n    extra_hosts:\n      - \"host.docker.internal:host-gateway\"\n\n  babs:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    command: [\"python\", \"persona.py\"]\n    environment:\n      - PERSONA_ID=babs\n      - MODEL_NAME=${BABS_MODEL_NAME:-gemma:7b}\n    volumes:\n      - ./persona.py:/app/persona.py\n      - ./chroma_data:/app/chroma_data\n    depends_on:\n      - shared_mind_api\n    extra_hosts:\n      - \"host.docker.internal:host-gateway\"\n\n  alfred:\n    build:\n      context: .\n      dockerfile: Dockerfile\n    command: [\"python\", \"persona.py\"]\n    environment:\n      - PERSONA_ID=alfred\n      - MODEL_NAME=${ALFRED_MODEL_NAME:-phi3:3.8b}\n    volumes:\n      - ./persona.py:/app/persona.py\n      - ./chroma_data:/app/chroma_data\n    depends_on:\n      - shared_mind_api\n    extra_hosts:\n      - \"host.docker.internal:host-gateway\"\n\n  ```","metadata":{}}],"metadata":{"colab":{"from_bard":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}
// TelOS Neuro-Symbolic Intelligence Demonstration
// Integration of FFI, Cognitive Cycle, and Morphic UI

"ðŸ§  TelOS: Demonstrating Neuro-Symbolic Intelligence System" println
"=================================================" println

// Phase 1: Initialize cognitive architecture
"Phase 1: Initializing Cognitive Architecture..." println
Telos createWorld
"- Morphic world created (living canvas)" println

// Phase 2: Test FFI bridge
"Phase 2: Testing Synaptic Bridge (C-Python FFI)..." println
pythonResult := Telos pyEval("print('Synaptic bridge operational')")
("- FFI Result: " .. pythonResult) println

// Phase 3: Test cognitive services  
"Phase 3: Testing Dual-Process Cognition (GCE/HRC)..." println
cogResult := Telos pyEval("from cognitive_services import CognitiveCoordinator; coord = CognitiveCoordinator(); print('Cognitive coordinator ready')")
("- Cognition Result: " .. cogResult) println

// Phase 4: Morphic visualization
"Phase 4: Opening Morphic UI Window..." println  
Telos openWindow
"- SDL2 window opened for direct manipulation" println

// Phase 5: Live cognitive query with visualization
"Phase 5: Performing Live Cognitive Query..." println
queryCode := "
from cognitive_services import CognitiveCoordinator
coord = CognitiveCoordinator()
result = coord.cognitive_query('what is consciousness', 'neuro-symbolic AI context')
print('Cognitive query executed - GCE: ' + str(len(result.get('gce_candidates', []))) + ' candidates')
print('HRC reasoning operations: ' + str(result.get('hrc_reasoning', {}).get('binding_operations', 0)))
"
liveResult := Telos pyEval(queryCode)
("- Live Cognition: " .. liveResult) println

// Phase 6: Draw visualization
"Phase 6: Rendering Cognitive State..." println
Telos drawWorld  
"- Morphic world rendered to SDL2" println

// Phase 7: Brief interaction window
"Phase 7: Interactive Window (3 seconds)..." println
"- Window visible - cognitive state visualized" println
System system("sleep 3")

// Phase 8: Test Ollama integration  
"Phase 8: Testing LLM Integration..." println
ollamaTest := "
import requests
try:
    response = requests.get('http://localhost:11434/api/tags', timeout=2)
    if response.status_code == 200:
        models = response.json()
        model_count = len(models.get('models', []))
        print('Ollama connected: ' + str(model_count) + ' models available')
    else:
        print('Ollama service not responding')
except:
    print('Ollama connection failed - models not accessible')
"
ollamaResult := Telos pyEval(ollamaTest)
("- LLM Status: " .. ollamaResult) println

// Phase 9: Clean shutdown
"Phase 9: Clean System Shutdown..." println
Telos closeWindow
"- SDL2 window closed" println

"ðŸŽ¯ DEMONSTRATION COMPLETE" println
"=================================================" println
"TelOS Components Verified:" println  
"âœ“ Prototypal Core (Io mind)" println
"âœ“ Synaptic Bridge (C FFI)" println
"âœ“ Python Muscle (Cognitive services)" println  
"âœ“ Morphic UI (SDL2 rendering)" println
"âœ“ Living Image Architecture" println
"âœ“ GIL Quarantine (Subprocess execution)" println
"=================================================" println
